app.vue
<template>
<div class = 'container'>
  <div class = 'row'>
    <div class = "col-md-12">
      <div>
        <router-view></router-view>
      </div>
    </div>
  </div>
</div>
</template>

<script>
import USignup from './components/USignup.vue'
export default {
  name: 'App',
  components: {
    USignup
  }
}
</script>





models.py

from datetime import datetime
from instance.database import db

# User table with roles
from sqlalchemy import CheckConstraint

class Person(db.Model):
    __tablename__ = 'persons'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    email = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(20), nullable=False)
    date_joined = db.Column(db.DateTime, default=db.func.current_timestamp())
    pincodes = db.Column(db.String(100), nullable=True)  # Comma-separated list, up to 10 pincodes
    #__table_args__ = (CheckConstraint("length(split_part(pincodes, ',', 10)) <= 10", name="max_10_pincodes"),)

class User(Person):
    __tablename__ = 'users'
    id = db.Column(db.Integer, db.ForeignKey('persons.id'), primary_key=True)
    role = db.Column(db.String(20), default='user', nullable=False)
    address = db.Column(db.String(255), nullable=True)  # Comma-separated list for multiple addresses

class Professional(Person):
    __tablename__ = 'professionals'
    id = db.Column(db.Integer, db.ForeignKey('persons.id'), primary_key=True)
    service_category = db.Column(db.String(50), nullable=True)
    ratings = db.Column(db.Float, nullable=True)
    experience = db.Column(db.Integer, nullable=True)
    aadhar_card = db.Column(db.String(12), unique=True, nullable=True)  # Assuming 12-digit Aadhar card
    document = db.Column(db.LargeBinary, nullable=True)  # Add file size validation in form handling

'''class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    email = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(20), nullable=False)
    #address = db.Column(db.String(100),nullable = False)
    role = db.Column(db.String(20), nullable=False)
    created = db.Column(db.DateTime, default=db.func.current_timestamp())

class Professional(db.Model):
    __tablename__ = 'professionals'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    name = db.Column(db.String(50), nullable=False)
    service_type = db.Column(db.String(50))
    experience = db.Column(db.Integer)

    # Define the relationship with Service
    services = db.relationship('Service', back_populates='professional')
'''
class Service(db.Model):
    __tablename__ = 'services'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    #professional_id = db.Column(db.Integer, db.ForeignKey('professionals.id'), nullable=False)
    base_price = db.Column(db.Float, nullable=False)
    description = db.Column(db.Text, nullable=True)
    category = db.Column(db.String(50))
    time_required = db.Column(db.String(50))
    approval_status = db.Column(db.String(20), default='Pending')
    #total_orders = db.Column(db.Integer, default=0)
    avg_rating = db.Column(db.Float, default=0.0)

    # Establish relationship with Professional
    #professional = db.relationship('Professional', back_populates='services')
    
# Service Request table with relationships to User, Professional, and Service
class ServiceRequest(db.Model):
    __tablename__ = 'service_requests'
    id = db.Column(db.Integer, primary_key=True)
    service_id = db.Column(db.Integer, db.ForeignKey('services.id'), nullable=False)  # Foreign key to Service
    customer_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)  # Customer ID (User table)
    professional_id = db.Column(db.Integer, db.ForeignKey('professionals.id'), nullable=False)  # Assigned Professional

    date_of_request = db.Column(db.DateTime, default=datetime.utcnow)
    status = db.Column(db.String(20), default='Requested')  # E.g., 'Requested', 'Assigned', 'Completed', 'Closed'
    rating = db.Column(db.Float, nullable=True)
    comments = db.Column(db.Text, nullable=True)


fetchservices

'class FetchService(Resource):
    def get(self, id=None):
        if id:
            print("Received GET request for service ID:", id)
            service = Service.query.filter_by(id=id).first()
            if not service:
                print("Service not found with ID:", id)
                return jsonify({"error": "Service not found"}), 404
            result = {
                "id": service.id,
                "name": service.name,
                "base_price": service.base_price,
                "description": service.description,
                "category": service.category,
                "time_required": service.time_required,
                "approval_status": service.approval_status,
                "avg_rating": service.avg_rating
            }
            #print("Fetched service successfully with ID:", id)
            return jsonify(result), 200
        else:
            #print("Received GET request for all services")
            services = Service.query.all()
            result = [{
                "id": service.id,
                "name": service.name,
                "base_price": service.base_price,
                "description": service.description,
                "category": service.category,
                "time_required": service.time_required,
                "approval_status": service.approval_status,
                "avg_rating": service.avg_rating
            } for service in services]
            
            print("Fetched all services successfully")
            return jsonify(result), 200





records.vue
<template>
  <div class="records-page">
    <h2>Scheduled Bookings</h2>
    <div v-for="booking in scheduledBookings" :key="booking.id" class="booking-item">
      <p>Service: {{ booking.serviceName }}</p>
      <p>Date: {{ booking.date }}</p>
      <p>Professional: {{ booking.professionalName }} - {{ booking.professionalRating }}â˜…</p>
      <p>Contact: {{ booking.professionalPhone }}</p>
    </div>

    <h2>Past Bookings</h2>
    <div v-for="booking in pastBookings" :key="booking.id" class="booking-item">
      <p>Service: {{ booking.serviceName }}</p>
      <p>Date: {{ booking.date }}</p>
      <div>
        <label>Rating:</label>
        <input type="number" v-model="booking.rating" max="5" min="1" />
        <textarea v-model="booking.review" placeholder="Leave a review"></textarea>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      scheduledBookings: [], // Populate from API
      pastBookings: [], // Populate from API
    };
  },
};
</script>


<template>
  <div class="records">
    <h2>Your Bookings</h2>
    <div v-for="booking in bookings" :key="booking.id" class="booking-card">
      <h3>{{ booking.service.name }}</h3>
      <p>Booked Date: {{ booking.booking_date | formatDate }}</p>
      <p>Status: {{ booking.status }}</p>

      <!-- For Future or Assigned Bookings -->
      <div v-if="booking.status === 'Requested' || booking.status === 'Assigned'" class="action-buttons">
        <button @click="previewBooking(booking)">Preview</button>
        <button @click="rescheduleBooking(booking)">Reschedule</button>
        <button @click="cancelBooking(booking)">Cancel</button>
      </div>

      <!-- For Completed Bookings -->
      <div v-else-if="booking.status === 'Completed'" class="action-buttons">
        <button @click="previewBooking(booking)">Preview</button>
        <button v-if="showRatingOption(booking.booking_date)" @click="rateBooking(booking)">Rate</button>
      </div>
    </div>
  </div>
</template>


summmary
<template>
  <div class="summary-page">
    <h2>Summary</h2>
    <p>Requested Jobs: {{ jobStats.requested }}</p>
    <p>Closed Jobs: {{ jobStats.closed }}</p>
    <p>Ongoing Jobs: {{ jobStats.ongoing }}</p>
  </div>
</template>

<script>
export default {
  data() {
    return {
      jobStats: { requested: 0, closed: 0, ongoing: 0 },
    };
  },
  mounted() {
    // Fetch job stats from API
  },
};
</script>


service req
'''def post(self):
        data = request.get_json()
        
        if not data.get('service_id') or not data.get('user_id') or not data.get('professional_id'):
            return {'message': 'Missing required fields'}, 400

        try:
            booking_date = datetime.strptime(data['booking_date'], '%Y-%m-%d %H:%M')
        except ValueError:
            return {'message': 'Invalid booking date format. Use YYYY-MM-DD HH:MM'}, 400

        if booking_date.hour < 7 or booking_date.hour > 19:
            return {'message': 'Booking time must be between 7 AM and 7 PM'}, 400

        service_request = ServiceRequest(
            service_id=data['service_id'],
            user_id=data['user_id'],
            professional_id=data['professional_id'],
            date_of_request=datetime.utcnow(),
            booking_date=booking_date,
            status='Requested'
        )
        
        db.session.add(service_request)
        db.session.commit()
        
        return {'message': 'Service request created successfully'}, 201'''


        '''def get(self, request_id=None):
        """Get a specific service request by ID or a list of all service requests if ID is not provided."""
        if request_id:
            service_request = ServiceRequest.query.get(request_id)
            if service_request:
                return jsonify(self.format_service_request(service_request))
            return {'message': 'Service request not found'}, 404
        else:
            service_requests = ServiceRequest.query.all()
            return jsonify([self.format_service_request(sr) for sr in service_requests])
'''

'''def put(self, request_id):
        """Update an existing service request by ID."""
        data = request.get_json()
        service_request = ServiceRequest.query.get(request_id)
        
        if not service_request:
            return {'message': 'Service request not found'}, 404

        try:
            # Update booking date if provided and validate
            if 'booking_date' in data:
                booking_date_str = data.get('booking_date')
                booking_date = datetime.strptime(booking_date_str, '%Y-%m-%d %H:%M')
                
                if booking_date > datetime.now() + timedelta(days=2):
                    return {'message': 'Booking can only be updated up to 2 days in advance.'}, 400
                
                service_request.booking_date = booking_date

            # Update other fields if provided
            service_request.status = data.get('status', service_request.status)
            service_request.rating = data.get('rating', service_request.rating)
            service_request.comments = data.get('comments', service_request.comments)

            db.session.commit()
            return {'message': 'Service request updated successfully'}, 200
        except ValueError as ve:
            return {'message': f'Invalid date format: {ve}'}, 400
        except Exception as e:
            return {'message': str(e)}, 500
'''


'''class ServiceRequestAPI(Resource):
    def get(self, request_id=None):
        if request_id is None:
            # Return a list of all service requests
            service_requests = ServiceRequest.query.all()
            return [{'id': req.id, 'service_id': req.service_id, 'user_id': req.user_id,
                     'professional_id': req.professional_id, 'status': req.status,
                     'booking_date': req.booking_date.isoformat()} for req in service_requests], 200
        else:
            # Return a specific service request by ID
            service_request = ServiceRequest.query.get(request_id)
            if not service_request:
                return {'message': 'Service request not found'}, 404
            return {'id': service_request.id, 'service_id': service_request.service_id,
                    'user_id': service_request.user_id, 'professional_id': service_request.professional_id,
                    'status': service_request.status, 'booking_date': service_request.booking_date.isoformat()}, 200

    def post(self):
        # Handle creation of a new service request
        data = request.get_json()
        try:
            booking_date = datetime.strptime(data['booking_date'], '%Y-%m-%d %H:%M')
        except ValueError:
            return {'message': 'Invalid booking date format. Use YYYY-MM-DD HH:MM'}, 400

        if booking_date.hour < 7 or booking_date.hour > 19:
            return {'message': 'Booking time must be between 7 AM and 7 PM'}, 400

        service_request = ServiceRequest(
            service_id=data['service_id'],
            user_id=data['user_id'],
            professional_id=data['professional_id'],
            date_of_request=datetime.utcnow(),
            booking_date=booking_date,
            status='Requested'
        )
        
        db.session.add(service_request)
        db.session.commit()
        
        return {'message': 'Service request created successfully'}, 201

    def put(self, request_id):
        # Update a specific service request
        service_request = ServiceRequest.query.get(request_id)
        if not service_request:
            return {'message': 'Service request not found'}, 404

        data = request.get_json()
        if 'status' in data:
            service_request.status = data['status']
        if 'rating' in data:
            service_request.rating = data['rating']
        if 'comments' in data:
            service_request.comments = data['comments']

        db.session.commit()
        return {'message': 'Service request updated successfully'}, 200

    def delete(self, request_id):
        service_request = ServiceRequest.query.get(request_id)
        if not service_request:
            return {'message': 'Service request not found'}, 404
        
        db.session.delete(service_request)
        db.session.commit()
        return {'message': 'Service request deleted successfully'}, 200

class ServiceRequestAPI(Resource):
    def post(self):
        data = request.get_json()
        
        # Validate required fields
        if not all(key in data for key in ('service_id', 'user_id', 'professional_id', 'rating', 'comments')):
            return {'message': 'Missing required fields'}, 400

        try:
            new_request = ServiceRequest(
                service_id=data['service_id'],
                user_id=data['user_id'],
                professional_id=data['professional_id'],
                date_of_request=datetime.now(),
                status=data.get('status', 'Requested'),
                rating=data['rating'],
                comments=data['comments']
            )
            
            db.session.add(new_request)
            db.session.commit()
            
            return {'message': 'Service request created successfully'}, 201
        except Exception as e:
            db.session.rollback()
            return {'message': str(e)}, 500

    def get(self, request_id=None):
        if request_id:
            # Fetch specific request
            request_obj = ServiceRequest.query.get(request_id)
            if request_obj:
                return jsonify(request_obj.as_dict())
            else:
                return {'message': 'Service request not found'}, 404
        else:
            # Fetch all requests
            requests = ServiceRequest.query.all()
            return jsonify([req.as_dict() for req in requests])

    def put(self, request_id):
        data = request.get_json()
        request_obj = ServiceRequest.query.get(request_id)
        
        if not request_obj:
            return {'message': 'Service request not found'}, 404

        # Update fields if they are in the request payload
        if 'status' in data:
            request_obj.status = data['status']
        if 'rating' in data:
            request_obj.rating = data['rating']
        if 'comments' in data:
            request_obj.comments = data['comments']
        
        db.session.commit()
        return {'message': 'Service request updated successfully'}

    def delete(self, request_id):
        request_obj = ServiceRequest.query.get(request_id)
        
        if not request_obj:
            return {'message': 'Service request not found'}, 404
        
        db.session.delete(request_obj)
        db.session.commit()
        return {'message': 'Service request deleted successfully'}'''




'''
class AddService(Resource):
    def post(self):
        data = request.get_json()
        new_service = Service(
        name=data.get('name'),
        base_price=data.get('base_price'),
        description=data.get('description'),
        category=data.get('category'),
        time_required=data.get('time_required'),
        approval_status=data.get('approval_status', 'Pending'),
        avg_rating=data.get('avg_rating', 0)
    )
        db.session.add(new_service)
        db.session.commit()
        return ({"message": "Service created"}), 201
    
class DelService(Resource):
    def delete(self,id):
        service = Service.query.get(id)
        if service:
            db.session.delete(service)
            db.session.commit()
            return ({"message": "Service deleted"}), 200
        return ({"message": "Service not deleted"}), 404

class UpdService(Resource):
    def put(self,id):
        service = Service.query.get(id)
        data = request.get_json()
        if not service:
            return {"message": "Service not found"}, 404
        data = request.get_json()
        service.name = data.get('name', service.name)
        service.base_price = data.get('base_price', service.base_price)
        service.description = data.get('description', service.description)
        service.category = data.get('category', service.category)
        service.time_required = data.get('time_required', service.time_required)
        service.approval_status = data.get('approval_status', service.approval_status)
        service.avg_rating = data.get('avg_rating', service.avg_rating)
        db.session.commit()
        return {"message": "Service updated"}, 200
       
class FetchService(Resource):
    def get(self, id=None):
        if id:
            service = Service.query.get(id)
            if not service:
                return {"error": "Service not found"}, 404
            return {
                "id": service.id,
                "name": service.name,
                "base_price": service.base_price,
                "description": service.description,
                "category": service.category,
                "time_required": service.time_required,
                "approval_status": service.approval_status,
                "avg_rating": service.avg_rating
            }, 200
        services = Service.query.all()
        return [{
            "id": service.id,
            "name": service.name,
            "base_price": service.base_price,
            "description": service.description,
            "category": service.category,
            "time_required": service.time_required,
            "approval_status": service.approval_status,
            "avg_rating": service.avg_rating
        } for service in services], 200

class ProRegistrationAPI(Resource):
    data = request.get_json()
    if data.get('email') and data.get('')


class ProLoginAPI(Resource):
    data = request.get_json()
'''




<template>
  <div class="home-container">
    <!-- Top Bar with Welcome Message, Search Box, Category Filter, and Buttons -->
    <div class="top-bar">
      <div class="welcome-message">
        <h2>Welcome Admin</h2>
      </div>
      <div class="search-container">
        <input
          type="text"
          v-model="searchQuery"
          placeholder="Search..."
          class="search-box"
        />
      </div>
      <div class="category-filter">
        <select v-model="selectedCategory" @change="filterServices" class="category-dropdown">
          <option value="">Filter by Category</option>
          <option v-for="category in categories" :key="category.id" :value="category.id">
            {{ category.name }}
          </option>
        </select>
      </div>
      <div class="buttons-container">
        <button @click="navigateTo('home')">Home</button>
        <button @click="navigateTo('professional')">Professional</button>
        <button @click="navigateTo('summary')">Summary</button>
        <button @click="logout">Logout</button>
      </div>
    </div>

    <!-- Services Table -->
    <div class="services-section">
      <h3>Services</h3>
      <table class="services-table" v-if="filteredServices.length === 0">
        <thead>
          <tr>
            <th>Name</th>
            <th>Base Price</th>
            <th>Category</th>
            <th>Time Required</th>
            <th>Avg Rating</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="service in filteredServices" :key="service.id">
            <td>{{ service.name }}</td>
            <td>{{ service.base_price }}</td>
            <td>{{ service.category }}</td>
            <td>{{service.time_required}}</td>
            <td>{{service.avg_rating}}</td>
            <td>
              <button @click="editService(service.id)">Edit</button>
              <button @click="deleteService(service.id)">Delete</button>
            </td>
          </tr>
        </tbody> 
      </table>
      <table v-else>
            <td colspan="4">No services found</td>
      </table>
    </div>

    <!-- Add Category and Add Service Options -->
    <div class="add-options">
      <button class="add-button" @click="addCategory">Add Category</button>
      <button class="add-button" @click="addService">Add Service</button>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      searchQuery: '',
      selectedCategory: '',
      categories: [],
      services: [], // Array to hold services fetched from backend
      filteredServices: [], // Filtered services based on search and category
    };
  },
  methods: {
    async fetchServices() {
      try {
        const response = await this.$axios.get('http://127.0.0.1:5000/services');
        console.log(response.data);
        this.services = response.data;
        console.log("hello",this.services);
        this.filteredServices = this.services; // Initially display all services
        console.log("heldddlo",this.filteredServices);
      } catch (error) {
        console.error('Error fetching services:', error);
      }
    },
    filterServices() {
      this.filteredServices = this.services.filter((service) => {
        return (
          service.name.toLowerCase().includes(this.searchQuery.toLowerCase()) &&
          (this.selectedCategory ? service.category === this.selectedCategory : true)
        );
      });
    },
    navigateTo(page) {
      this.$router.push({ name: page });
    },
    logout() {
      // Add your logout functionality here
      this.$router.push({ name: 'login' });
    },
    
    addService() {
      // Navigate to add service page
      this.$router.push("/addservices");
    },
    editService(serviceId) {
      // Navigate to edit service page
      this.$router.push({ name: 'edit-service', params: { id: serviceId } });
    },
    deleteService(serviceId) {
      // Implement delete functionality
      this.$axios.delete(`http://127.0.0.1:5000/services/${serviceId}`)
        .then(() => {
          this.fetchServices(); // Refresh services list
          this.$toast.success('Service deleted successfully');
        })
        .catch((error) => {
          console.error('Error deleting service:', error);
          this.$toast.error('Failed to delete service');
        });
    },
  },
  mounted() {
    this.fetchServices();
  },
};
</script>

<style scoped>
.home-container {
  padding: 20px;
  font-family: Arial, sans-serif;
}

/* Top Bar Styles */
.top-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.welcome-message h2 {
  margin: 0;
  font-size: 24px;
}

.search-container {
  flex: 1;
  margin-right: 20px;
}

.search-box {
  width: 100%;
  padding: 8px;
  font-size: 14px;
}

.category-filter {
  margin-right: 20px;
}

.category-dropdown {
  padding: 8px;
  font-size: 14px;
}

.buttons-container {
  display: flex;
  gap: 10px;
}

.buttons-container button {
  padding: 10px 15px;
  font-size: 14px;
  cursor: pointer;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
}

.buttons-container button:hover {
  background-color: #0056b3;
}

/* Services Section Styles */
.services-section {
  margin-top: 20px;
}

.services-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
}

.services-table th,
.services-table td {
  padding: 10px;
  text-align: left;
  border: 1px solid #ddd;
}

.services-table th {
  background-color: #f4f4f4;
}

.services-table td button {
  margin-right: 5px;
  padding: 5px 10px;
  font-size: 14px;
  cursor: pointer;
  background-color: #28a745;
  color: white;
  border: none;
  border-radius: 5px;
}

.services-table td button:hover {
  background-color: #218838;
}

.add-options {
  margin-top: 20px;
}

.add-button {
  padding: 10px 20px;
  font-size: 14px;
  cursor: pointer;
  background-color: #17a2b8;
  color: white;
  border: none;
  border-radius: 5px;
  margin-right: 10px;
}

.add-button:hover {
  background-color: #138496;
}
</style>







AHOME
<template>
  <div class="services-section">
    <h3>Services</h3>
    <table class="services-table" v-if="filteredServices.length > 0">
      <thead>
        <tr>
          <th>Name</th>
          <th>Base Price</th>
          <th>Category</th>
          <th>Time Required</th>
          <th>Avg Rating</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="service in filteredServices" :key="service.id">
          <td>{{ service.name }}</td>
          <td>{{ service.base_price }}</td>
          <td>{{ service.category }}</td>
          <td>{{ service.time_required }}</td>
          <td>{{ service.avg_rating }}</td>
          <td>
            <button @click="editservices(service.id)">Edit</button>
            <button @click="deleteService(service.id)">Delete</button>
          </td>
        </tr>
      </tbody> 
    </table>
    <div v-else>
      <p>No services found</p>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      searchQuery: '',
      selectedCategory: '',
      categories: [],
      services: [], // Array to hold services fetched from backend
      filteredServices: [], // Filtered services based on search and category
    };
  },
  methods: {
    async fetchServices() {
      try {
        const response = await axios.get('http://127.0.0.1:5000/services');
        this.services = response.data;
        this.filterServices(); // Update filteredServices based on the fetched services
      } catch (error) {
        console.error('Error fetching services:', error);
      }
    },
    filterServices() {
      this.filteredServices = this.services.filter((service) => {
        return (
          service.name.toLowerCase().includes(this.searchQuery.toLowerCase()) &&
          (this.selectedCategory ? service.category === this.selectedCategory : true)
        );
      });
    },
    navigateTo(page) {
      this.$router.push({ name: page });
    },
    logout() {
      localStorage.removeItem('token');
      this.$router.push({ name: 'login' });
    },
    addService() {
      this.$router.push("/addservices");
    },
    editservices(serviceId) {
      this.$router.push({ name: 'editservices', params: { id: serviceId } });
    },
    async deleteService(serviceId) {
      try {
        await axios.delete(`http://127.0.0.1:5000/services/${serviceId}`);
        this.fetchServices(); // Refresh services list
        this.$toast.success('Service deleted successfully');
      } catch (error) {
        console.error('Error deleting service:', error);
        this.$toast.error('Failed to delete service');
      }
    },
  },
  mounted() {
    this.fetchServices();
  },
};
</script>
 ahome with addservice option

 <template>
  <div>
    <div class="top-bar">
      <h2>Admin Dashboard</h2>
      <input v-model="searchQuery" placeholder="Search services..." @input="filterServices" />
      <select v-model="selectedCategory" @change="filterServices">
        <option value="">All Categories</option>
        <option v-for="category in categories" :key="category" :value="category">{{ category }}</option>
      </select>
      <button @click="navigateTo('AHome')">Home</button>
      <button @click="navigateTo('summary')">Summary</button>
      <button @click="logout">Logout</button>
    </div>
    
    <div class="services-section">
      <button @click="addService">Add Service</button>
      <h3>Services</h3>
      <table class="services-table" v-if="filteredServices.length > 0">
        <thead>
          <tr>
            <th>Name</th>
            <th>Base Price</th>
            <th>Category</th>
            <th>Time Required</th>
            <th>Avg Rating</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="service in filteredServices" :key="service.id">
            <td>{{ service.name }}</td>
            <td>{{ service.base_price }}</td>
            <td>{{ service.category }}</td>
            <td>{{ service.time_required }}</td>
            <td>{{ service.avg_rating }}</td>
            <td>
              <button @click="editService(service.id)">Edit</button>
              <button @click="deleteService(service.id)">Delete</button>
            </td>
          </tr>
        </tbody> 
      </table>
      <div v-else>
        <p>No services found</p>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      searchQuery: '',
      selectedCategory: '',
      categories: ['Cleaning', 'Plumbing', 'Electrical'], // Example categories, dynamically load if needed
      services: [],
      filteredServices: []
    };
  },
  methods: {
    async fetchServices() {
      try {
        const response = await axios.get('http://127.0.0.1:5000/services');
        this.services = response.data;
        this.filterServices();
      } catch (error) {
        console.error('Error fetching services:', error);
      }
    },
    filterServices() {
      this.filteredServices = this.services.filter((service) =>
        service.name.toLowerCase().includes(this.searchQuery.toLowerCase()) &&
        (this.selectedCategory ? service.category === this.selectedCategory : true)
      );
    },
    addService() {
      this.$router.push("/addservices");
    },
    editService(serviceId) {
      this.$router.push({ name: 'editservices', params: { id: serviceId } });
    },
    async deleteService(serviceId) {
      try {
        await axios.delete(`http://127.0.0.1:5000/services/${serviceId}`);
        this.fetchServices();
        alert('Service deleted successfully');
      } catch (error) {
        console.error('Error deleting service:', error);
      }
    },
    navigateTo(page) {
      this.$router.push({ name: page });
    },
    logout() {
      localStorage.removeItem('token');
      this.$router.push({ name: 'login' });
    }
  },
  mounted() {
    this.fetchServices();
  }
};
</script>



working AHome.vue

<template>
  <div id="app">
    <h1>{{name}}</h1>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <a class="navbar-brand" href="#">Home Services</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item active">
            <a class="nav-link" href="#">Home</a>
          </li>
          <li class="nav-item dropdown">
            <a
              class="nav-link dropdown-toggle"
              href="#"
              id="categoryDropdown"
              role="button"
              data-toggle="dropdown"
              aria-haspopup="true"
              aria-expanded="false"
            >
              Categories
            </a>
            <div class="dropdown-menu" aria-labelledby="categoryDropdown">
              <a
                v-for="cat in categories"
                :key="cat"
                class="dropdown-item"
                href="#"
                @click="selectCategory(cat)"
              >
                {{ cat }}
              </a>
            </div>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Summary</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Add to Cart</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Records</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Profile</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Logout</a>
          </li>
        </ul>
         
        <form class="form-inline my-2 my-lg-0">
          <input
            class="form-control mr-sm-2"
            type="search"
            placeholder="Search"
            aria-label="Search"
          />
          <button class="btn btn-outline-success my-2 my-sm-0" type="submit">
            Search
          </button>
         
        </form>
      </div>
    </nav>
    
    <div class="container">
      <!-- Render router views or specific components here -->
      <router-view />
    </div>
  </div>
</template>

<script>
import axios from "axios";

export default {
  name: "UHome",
  data() {
    return {
      categories: [],
      name: "Shreya",
    };
  },
  methods: {
    async fetchCategories() {
      try {
        const token = localStorage.getItem("token");
        const auth_token = `Bearer ${token}`;
        const config = {
            headers: {
              'Content-Type': 'application/json',
              'Authorization': auth_token
            }
          }
        const response = await axios.get("http://127.0.0.1:5000/categories", config)
        this.categories = response.data.categories;
      } catch (error) {
        console.error("Error fetching categories:", error);
      }
    },
    selectCategory(category) {
      // Handle category selection
      console.log(`Selected category: ${category}`);
    },
  },
  mounted() {
    if (localStorage.getItem("token")) {
      // User is logged in, fetch categories
      this.fetchCategories();
    } else {
      // Redirect to login page
      this.$router.push("/login");
    }
    
  },
};
</script>

<style>
/* Global styles */
</style>


        async fetchServiceDetails() {
            try {
                const response = await axios.get(`http://127.0.0.1:5000/services/${this.id}`);
                const data = response.data;
                this.name = data.name;
                this.base_price = data.base_price;
                this.description = data.description;
                this.category = data.category;
                this.time_required = data.time_required;
                this.avg_rating = data.avg_rating;
            } catch (error) {
                console.error("Failed to fetch service details", error);
                alert("Failed to load service details.");
            }
        },
        async updateService() {
            try {
                await axios.put(`http://127.0.0.1:5000/services/${this.id}`, {
                    name: this.name,
                    base_price: this.base_price,
                    description: this.description,
                    category: this.category,
                    time_required: this.time_required,
                    avg_rating: this.avg_rating,
                });
                alert("Service updated successfully");
                this.$router.push("/admin");
            } catch (error) {
                console.error("Failed to update service", error);
                alert("Failed to update service");
            }
        },


workin UHome
<template>
  <div id="app">
    <h1>Hello, {{ name }}</h1>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <a class="navbar-brand" href="#">Home Services</a>
      <div class="collapse navbar-collapse">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item active">
            <a class="nav-link" href="#">Home</a>
          </li>
          <li class="nav-item dropdown">
            <a
              class="nav-link dropdown-toggle"
              href="#"
              id="categoryDropdown"
              role="button"
              data-toggle="dropdown"
              aria-haspopup="true"
              aria-expanded="false"
            >
              Categories
            </a>
            <div class="dropdown-menu" aria-labelledby="categoryDropdown">
              <a
                v-for="cat in categories"
                :key="cat"
                class="dropdown-item"
                href="#"
                @click="selectCategory(cat)"
              >
                {{ cat }}
              </a>
            </div>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Summary</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Add to Cart</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Records</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Profile</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" @click="logout">Logout</a>
          </li>
        </ul>

        <form class="form-inline my-2 my-lg-0" @submit.prevent="filterServices">
          <input
            v-model="searchQuery"
            class="form-control mr-sm-2"
            type="search"
            placeholder="Search"
            aria-label="Search"
          />
          <button class="btn btn-outline-success my-2 my-sm-0" type="submit">
            Search
          </button>
        </form>
      </div>
    </nav>

    <div class="container" v-for="service in filteredServices" :key="service.id">     
      <h4>{{ service.name }}</h4>
      <h5>{{ service.base_price }}</h5>
      <h5>{{ service.category }}</h5>
      <h5>{{ service.time_required }}</h5>
      <h5>{{ service.avg_rating }}</h5>
    </div>
  </div>
</template>

<script>
import axios from "axios";

export default {
  name: "UHome",
  data() {
    return {
      categories: ["Cleaning", "Plumbing", "Electrical"],
      services: [],
      filteredServices: [],
      selectedCategory: null,
      searchQuery: "",
      name: ""
    };
  },
  methods: {
    logout() {
      localStorage.clear();
      this.$router.push("/login");
    },
    filterServices() {
      this.filteredServices = this.services.filter(service =>
        service.name.toLowerCase().includes(this.searchQuery.toLowerCase()) &&
        (this.selectedCategory ? service.category === this.selectedCategory : true)
      );
    },
    async fetchCategories() {
      try {
        const token = localStorage.getItem("token");
        const auth_token = `Bearer ${token}`;
        const config = {
          headers: {
            Authorization: auth_token
          }
        };
        const response = await axios.get("http://127.0.0.1:5000/categories", config);
        this.categories = response.data.categories;
      } catch (error) {
        console.error("Error fetching categories:", error);
      }
    },
    selectCategory(category) {
      this.selectedCategory = category;
      this.filterServices();
    },
    async fetchServices() {
      try {
        const response = await axios.get("http://127.0.0.1:5000/services");
        this.services = response.data;
        this.filterServices();
      } catch (error) {
        console.error("Error fetching services:", error);
      }
    }
  },
  mounted() {
    const token = localStorage.getItem("token");
    const name = localStorage.getItem("name");
    this.name = JSON.parse(name || "{}");

    if (token) {
      this.fetchCategories();
      this.fetchServices();
    } else {
      this.$router.push("/login");
    }
  }
};
</script>

<style>
/* Global styles */
</style>


UCart.vue<template>
  <div class="ucart">
    <h2>Your Cart</h2>
    <div v-if="cartItems.length">
      <div v-for="(item, index) in cartItems" :key="index" class="cart-item">
        <h3>{{ item.name }}</h3>
        <p>{{ item.description }}</p>
        <p>Price: Rs. {{ item.base_price }}</p>
        
        <div>
          <label>Quantity: </label>
          <input type="number" v-model.number="item.quantity" @change="updateTotal" min="1" />
        </div>
        <p>Subtotal: Rs. {{ item.base_price * item.quantity }}</p>
      </div>
      <hr />
       <div>
    <h3>Choose a Date</h3>
    <input type="date" v-model="selectedDate" :min="today" :max="maxDate" />

    <h3>Choose a Time Slot</h3>
    <select v-model="selectedTime">
      <option v-for="hour in hours" :key="hour" :value="hour">{{ hour }}:00</option>
    </select>

    <button @click="placeOrder">Place Order</button>
  </div>
  <hr />
      <div class="charges">
        <p>Hygiene Charges: Rs. 39</p>
        <p>Total: Rs. {{ calculateTotal() }}</p>
      </div>
    </div>
    <div v-else>
      <p>Your cart is empty.</p>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      selectedDate: '',
      selectedTime: '07',
      today: new Date().toISOString().split('T')[0],
      maxDate: new Date(new Date().setDate(new Date().getDate() + 2)).toISOString().split('T')[0],
      hours: [...Array(13).keys()].map(i => i + 7)  // Generates hours from 7 to 19 (7 AM to 7 PM)
    };
  },
  methods: {
    async placeOrder() {
      const bookingDateTime = `${this.selectedDate} ${this.selectedTime}:00`;
      const payload = {
        service_id: this.serviceId,
        user_id: this.userId,
        professional_id: this.professionalId,
        booking_date: bookingDateTime,
      };

      const response = await axios.post('/service_requests', payload);
      if (response.status === 201) {
        alert('Order placed successfully!');
        this.$router.push({ name: 'Records' });
      } else {
        alert(response.data.message || 'An error occurred while placing the order.');
      }
    }
  }
};
</script>


<style scoped>
.ucart {
  max-width: 600px;
  margin: 0 auto;
}
.cart-item {
  margin-bottom: 20px;
}
.charges {
  font-weight: bold;
  text-align: right;
}
</style>

psignup

<template>
  <div class="row">
    <div class="col-md-6 offset-md-3">
      <div>
        <h3>Sign Up</h3>
        <hr />
        <form @submit.prevent="validateForm">
          <!-- Name Field -->
          <div class="form-group">
            <label>Name</label>
            <input type="text" class="form-control" v-model="name" placeholder="Enter your name" required />
          </div>

          <!-- Email Field -->
          <div class="form-group">
            <label>Email</label>
            <input type="email" class="form-control" v-model="email" placeholder="Enter your email" required />
          </div>

          <!-- Password Field -->
          <div class="form-group">
            <label>Password</label>
            <input type="password" class="form-control" v-model="password" placeholder="Enter your password" required />
          </div>

          <!-- Mobile Number Field -->
          <div class="form-group">
            <label>Mobile Number</label>
            <input type="text" class="form-control" v-model="mobileNumber" placeholder="Enter your mobile number" required />
          </div>

          <!-- Address Field -->
          <div class="form-group">
            <label>Address</label>
            <input type="text" class="form-control" v-model="address" placeholder="Enter your address" required />
          </div>

          <!-- PinCode Field -->
          <div class="form-group">
            <label>PinCode</label>
            <input type="text" class="form-control" v-model="pincode" placeholder="Enter your pincode" required />
          </div>

          <!-- Submit Button -->
          <div class="my-3">
            <button type="submit" class="btn btn-primary">
              Sign Up
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</template>

<script>
import axios from "axios";
export default {
  name: "SignUp",
  data() {
    return {
      name: "",
      email: "",
      password: "",
      mobileNumber: "",
      address: "",
      pincode: "",
    };
  },
  methods: {
    async validateForm() {
      console.log(this.name, this.email, this.password, this.mobileNumber, this.address, this.pincode);
      // Validate mobile number and pincode
      const mobileNumberPattern = /^\d{10}$/;
      const pincodePattern = /^\d{6}$/;

      if (!mobileNumberPattern.test(this.mobileNumber)) {
        alert("Mobile number must be exactly 10 digits.");
        return;
      }

      if (!pincodePattern.test(this.pincode)) {
        alert("Pincode must be exactly 6 digits.");
        return;
      }

      // Proceed with form submission if validation passes
      // alert("Form is valid. Submitting...");
       try {
                const response = await axios.post('http://127.0.0.1:5000/register', {
                    email: this.email,
                    password: this.password,
                    name: this.name,
                    mobile_number: this.mobileNumber,
                    address: this.address,
                    pincode: this.pincode
                });
                console.log("RegistrationAPI successful", response.data);
                if (response.status == 201) {
                  alert(response.data.message)
                      console.log(response)
                      this.$router.push({ name: 'LoginPg'Â })
Â Â Â Â Â Â Â Â           }
                // Handle success, e.g., store token, redirect, etc.
            } catch (error) {
                console.error("Login failed", error);
                // Handle error, e.g., display error message
            }
      // Add further submission logic here, if necessary.
    },
  },
};
</script>


psignup<template>
  <div class="row">
    <div class="col-md-6 offset-md-3">
      <div>
        <h3>Sign Up</h3>
        <hr />
        <form @submit.prevent="validateForm">
          <!-- Name Field -->
          <div class="form-group">
            <label>Name</label>
            <input
              type="text"
              class="form-control"
              v-model="name"
              placeholder="Enter your name"
              required
            />
          </div>

          <!-- Email Field -->
          <div class="form-group">
            <label>Email</label>
            <input
              type="email"
              class="form-control"
              v-model="email"
              placeholder="Enter your email"
              required
            />
          </div>

          <!-- Password Field -->
          <div class="form-group">
            <label>Password</label>
            <input
              type="password"
              class="form-control"
              v-model="password"
              placeholder="Enter your password"
              required
            />
          </div>

          <!-- Mobile Number Field -->
          <div class="form-group">
            <label>Mobile Number</label>
            <input
              type="text"
              class="form-control"
              v-model="mobileNumber"
              placeholder="Enter your mobile number"
              required
            />
          </div>

          <!-- Experience Field -->
          <div class="form-group">
            <label>Experience</label>
            <input
              type="number"
              class="form-control"
              v-model="experience"
              placeholder="Enter your experience in years"
              required
            />
          </div>

          <!-- PinCode Field -->
          <div class="form-group">
            <label>PinCode</label>
            <input
              type="text"
              class="form-control"
              v-model="pincode"
              placeholder="Enter your pincode"
              required
            />
          </div>

          <!-- Service Category Dropdown -->
          <div class="form-group">
            <label>Service Category</label>
            <select class="form-control" v-model="serviceCategory" required>
              <option value="salon-women">Salon for Women</option>
              <option value="salon-men">Salon for Men</option>
              <option value="ac-appliance">AC and Appliance Servicing</option>
              <option value="painting">Painting</option>
              <option value="electrician">Electrician</option>
              <option value="carpenter">Carpenters</option>
            </select>
          </div>

          <!-- Submit Button -->
          <div class="my-3">
            <button type="submit" class="btn btn-primary">
              Sign Up
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: "PSignup",
  data() {
    return {
      name: "",
      email: "",
      password: "",
      mobileNumber: "",
      experience: null,
      pincode: "",
      serviceCategory: "",
    };
  },
  methods: {
    validateForm() {
      // Validate mobile number and pincode
      const mobileNumberPattern = /^\d{10}$/;
      const pincodePattern = /^\d{6}$/;

      if (!mobileNumberPattern.test(this.mobileNumber)) {
        alert("Mobile number must be exactly 10 digits.");
        return;
      }

      if (!pincodePattern.test(this.pincode)) {
        alert("Pincode must be exactly 6 digits.");
        return;
      }

      // Proceed with form submission if validation passes
      alert("Form is valid. Submitting...");
      // Add further submission logic here, if necessary.
    },
  },
};
</script>

<style>
h3 {
  color: purple;
}
</style>



working login

<template>
    <div class="container">
        <div class="login-form">
            <h3>Login</h3>
            <hr />
            <form @submit.prevent="handleSubmit">
                <div class="form-group">
                    <label>Email</label>
                    <input type="text" v-model="email" class="form-control" placeholder="Enter your email" required />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <input type="password" v-model="password" class="form-control" placeholder="Enter your password" required />
                </div>
                <button type="submit" class="login-btn">Login</button>
                <button type="button" class="register-btn" @click="register">Register</button>
            </form>
        </div>
    </div>
</template>

<script>
import axios from 'axios';

export default {
    name: "LoginPg",
    data() {
        return {
            email: "",
            password: "",
        };
    },
    methods: {
        async handleSubmit() {
            try {
                const response = await axios.post('http://127.0.0.1:5000/login', {
                    email: this.email,
                    password: this.password
                });
                localStorage.setItem('token', response.data.access_token);
                localStorage.setItem('userrole', response.data.userrole);
                localStorage.setItem('name', response.data.username);
                alert("Login Successful");
                if (response.data.access_token && response.data.userrole === 'Admin') {
                    this.$router.push('/admin');
                } else if (response.data.access_token && response.data.userrole === 'User') {
                    this.$router.push('/');
                }
            } catch (error) {
                console.error("Login failed", error);
            }
        },
        register() {
            // Handle navigation to the registration page
            this.$router.push('/register');
        }
    },
    mounted() {
        if (localStorage.getItem("token") && localStorage.getItem("userrole") === 'Admin') {
            this.$router.push('/admin');
        } else if (localStorage.getItem("token") && localStorage.getItem("userrole") === 'Professional') {
            this.$router.push('/professional');
        } else if (localStorage.getItem("token") && localStorage.getItem("userrole") === 'User') {
            this.$router.push('/');
        }
    }
};
</script>

<style>
body {
    background-color: #025f5d;
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100vh;
    margin: 0;
    font-family: Arial, sans-serif;
}

.container {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
}

.login-form {
    background-color: #ffffff;
    padding: 30px;
    border-radius: 15px;
    box-shadow: 0 4px 12px rgba(88, 195, 199, 0.504);
    width: 100%;
    max-width: 400px;
    text-align: center;
}

h3 {
    margin-bottom: 20px;
    font-size: 24px;
    color: #333;
}

.form-group {
    margin-bottom: 15px;
    text-align: left;
}

label {
    font-size: 14px;
    color: #555;
}

.form-control {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 8px;
    box-sizing: border-box;
    margin-top: 5px;
}

.form-control:focus {
    border-color: #007bff;
    outline: none;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
}

.login-btn {
    width: 100%;
    padding: 10px;
    border: none;
    border-radius: 8px;
    background-color: #007bff;
    color: white;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 20px;
}
.register-btn {
    width: 100%;
    padding: 10px;
    border: none;
    border-radius: 8px;
    background-color: #41933d;
    color: white;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    margin-top: 20px;
}

.login-btn:hover {
    background-color: #0056b3;
}
</style>



models.py
from datetime import datetime
from instance.database import db

# User table with roles
#from sqlalchemy import CheckConstraint

class Person(db.Model):
    __tablename__ = 'persons'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    email = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(20), nullable=False)
    mobile_number = db.Column(db.String(10), nullable=False)

    date_joined = db.Column(db.DateTime, default=db.func.current_timestamp())
    pincode = db.Column(db.String(100), nullable=False)  # Comma-separated list, up to 10 pincodes
    #__table_args__ = (CheckConstraint("length(split_part(pincodes, ',', 10)) <= 10", name="max_10_pincodes"),)

class User(Person):
    __tablename__ = 'users'
    id = db.Column(db.Integer, db.ForeignKey('persons.id'), primary_key=True)
    role = db.Column(db.String(20), default='user')
    address = db.Column(db.String(255), nullable=False)  # Comma-separated list for multiple addresses

class Professional(Person):
    __tablename__ = 'professionals'
    id = db.Column(db.Integer, db.ForeignKey('persons.id'), primary_key=True)
    service_category = db.Column(db.String(50), nullable=False)
    ratings = db.Column(db.Float, nullable=False)
    experience = db.Column(db.Integer, nullable=False)
    aadhar_card = db.Column(db.String(12), unique=True, nullable=False)  # Assuming 12-digit Aadhar card
    document = db.Column(db.LargeBinary, nullable=False)  # Add file size validation in form handling

'''class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(50), nullable=False)
    email = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(20), nullable=False)
    #address = db.Column(db.String(100),nullable = False)
    role = db.Column(db.String(20), nullable=False)
    created = db.Column(db.DateTime, default=db.func.current_timestamp())

class Professional(db.Model):
    __tablename__ = 'professionals'
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    name = db.Column(db.String(50), nullable=False)
    service_type = db.Column(db.String(50))
    experience = db.Column(db.Integer)

    # Define the relationship with Service
    services = db.relationship('Service', back_populates='professional')
'''
class Service(db.Model):
    __tablename__ = 'services'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    # professional_id = db.Column(db.Integer, db.ForeignKey('professionals.id'), nullable=False)
    base_price = db.Column(db.Float, nullable=False)
    description = db.Column(db.Text, nullable=True)
    category = db.Column(db.String(50))
    time_required = db.Column(db.String(50))
    # approval_status = db.Column(db.String(20), default='Pending')
    #total_orders = db.Column(db.Integer, default=0)
    avg_rating = db.Column(db.Float, default=0.0)

    def to_dict(self):
        return {
            "id": self.id,
            "name": self.name,
            "base_price": self.base_price,
            "category": self.category
        }

    # Establish relationship with Professional
    #professional = db.relationship('Professional', back_populates='services')
    
# Service Request table with relationships to User, Professional, and Service
class ServiceRequest(db.Model):
    __tablename__ = 'service_requests'
    id = db.Column(db.Integer, primary_key=True)
    service_id = db.Column(db.Integer, db.ForeignKey('services.id'), nullable=False)  # Foreign key to Service
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)  # Customer ID (User table)
    professional_id = db.Column(db.Integer, db.ForeignKey('professionals.id'), default = None)  # Assigned Professional
    date_of_request = db.Column(db.DateTime,nullable = False)
    booking_date = db.Column(db.DateTime, nullable=False)  
    status = db.Column(db.String(20), default='Requested')  # E.g., 'Requested', 'Assigned', 'Completed', 'Closed'
    rating = db.Column(db.Float, nullable=True)
    comments = db.Column(db.Text, nullable=True)
    quantity = db.Column(db.Integer, nullable=False)
    # user = db.Relationship('User', foreign_keys=[user_id])
    # professional = db.Relationship('User', foreign_keys=[professional_id])
    # service = db.Relationship('Service', foreign_keys=[service_id])
    service = db.relationship('Service', backref='service_requests')
    user = db.relationship('User', foreign_keys=[user_id], backref='service_requests')
    professional = db.relationship('User', foreign_keys=[professional_id], backref='professional_requests',
                                   primaryjoin="and_(ServiceRequest.professional_id == User.id, User.role == 'Professional')") 
    # professional = db.relationship('User', foreign_keys=[professional_id], backref='professional_requests')
    # user = db.relationship('User', backref='service_requests')
    # professional = db.relationship('Professional', backref='service_requests') 




    MY PREV UCart
    <template>
  <div>
    <h2>Services in Your Cart</h2>
    <div v-if="cartItems.length">
      <div v-for="item in cartItems" :key="item.id" class="cart-item">
        <p>{{ item.name }} - Quantity: {{ item.quantity }}</p>
        <p>Price per unit: {{ item.base_price }} Rs</p>
        <p>Subtotal: {{ item.quantity * item.base_price }} Rs</p>
      </div>
      <div>
        <h3>Total Cost: {{ totalCost }} Rs</h3>
      </div>
    </div>
    
    <div v-else>
      <p>No items in your cart.</p>
    </div>

    <div v-if="cartItems.length">
      <h3>Booking Details</h3>
      <form @submit.prevent="placeOrder">
        <label>Select Booking Date:</label>
        <input type="date" v-model="bookingDate" />
        
        <label>Select Time Slot:</label>
        <div class="time-slots">
          <button type="button" v-for="slot in timeSlots" :key="slot" @click="selectTimeSlot(slot)">
            {{ slot }}
          </button>
        </div>

        <h4>Selected Slot: {{ selectedTimeSlot }}</h4>
        
        <button type="submit" :disabled="!selectedTimeSlot || !bookingDate">Place an Order</button>
      </form>
    </div>
  </div>
</template>
<script>
import axios from 'axios';

export default {
  data() {
    return {
      service_id: this.$route.params.id,
      cartItems: [],
      bookingDate: '',
      timeSlots: ["7:00 AM", "9:00 AM", "11:00 AM", "1:00 PM", "3:00 PM", "5:00 PM"],
      selectedTimeSlot: '',
      totalCost: 0
    };
  },
  mounted() {
    this.cartItems = JSON.parse(localStorage.getItem('cart')) || [];
    this.calculateTotalCost();
    console.log('Cart items:', this.cartItems);
  },
  methods: {
    selectTimeSlot(slot) {
      this.selectedTimeSlot = slot;
    },
    calculateTotalCost() {
      this.totalCost = this.cartItems.reduce((total, item) => total + item.quantity * item.base_price, 0);
    },
    updateLocalStorage() {
      localStorage.setItem('cart', JSON.stringify(this.cartItems));
    },
    async placeOrder() {
      try {
        const token = localStorage.getItem('token');
        
        const response = await axios.post(
          'http://127.0.0.1:5000/place_order',
          {
            items: this.cartItems.map(item => ({
              service_id: item.id,
              quantity: item.quantity
            })),
            booking_date: `${this.bookingDate} ${this.selectedTimeSlot}`
          },
          {
            headers: {
              Authorization: `Bearer ${token}`
            }
          }
        );
        
        alert(response.data.message);
        
        // Clear the cart and update local storage
        this.cartItems = [];
        this.updateLocalStorage();
        
      } catch (error) {
        console.error('Error placing order:', error);
        if (error.response && error.response.status === 401) {
          alert('Please login to place an order.');
        } else {
          alert('An error occurred. Please try again later.');
        }
      }
    }
  }
};
</script>

<style scoped>
.cart-item {
  border-bottom: 1px solid #ddd;
  padding: 10px 0;
}
.time-slots button {
  margin: 5px;
  padding: 5px 10px;
}
</style>




  <template>
  <div>
    <h2>Services in Your Cart</h2>
    <div v-if="cartItems.length">
      <div v-for="item in cartItems" :key="item.id" class="cart-item">
        <p>{{ item.name }} - Quantity: {{ item.quantity }}</p>
        <p>Price per unit: {{ item.base_price }} Rs</p>
        <p>Subtotal: {{ item.quantity * item.base_price }} Rs</p>
      </div>
      <div>
        <h3>Total Cost: {{ totalCost }} Rs</h3>
      </div>
    </div>
    
    <div v-else>
      <p>No items in your cart.</p>
    </div>

    <div v-if="cartItems.length">
      <h3>Booking Details</h3>
      <form @submit.prevent="placeOrder">
        <label>Select Booking Date:</label>
        <input type="date" v-model="bookingDate" />
        
        <label>Select Time Slot:</label>
        <div class="time-slots">
          <button type="button" v-for="slot in timeSlots" :key="slot" @click="selectTimeSlot(slot)">
            {{ slot }}
          </button>
        </div>

        <h4>Selected Slot: {{ selectedTimeSlot }}</h4>
        
        <button type="submit" :disabled="!selectedTimeSlot || !bookingDate">Place an Order</button>
      </form>
    </div>
  </div>
</template>
<script>
import axios from 'axios';

export default {
  data() {
    return {
      // service_id: this.$route.params.id,
      cartItems: [],
      bookingDate: '',
      timeSlots: ["7:00 AM", "9:00 AM", "11:00 AM", "1:00 PM", "3:00 PM", "5:00 PM"],
      selectedTimeSlot: '',
      totalCost: 0
    };
  },
  methods: {
    selectTimeSlot(slot) {
      this.selectedTimeSlot = slot;
    },
    calculateTotalCost() {
      this.totalCost = this.cartItems.reduce((total, item) => total + item.quantity * item.base_price, 0);
    },
    updateLocalStorage() {
      localStorage.setItem('cart', JSON.stringify(this.cartItems));
    },
    async placeOrder() {
      try {
        let token = localStorage.getItem("Auth-Token");
        let tokenValue = JSON.parse(token || null);
        let authValue = "Bearer "+tokenValue
        const id = this.$route.params.id
        const data = {
          service_id: id, // The service ID from the database
          name: this.name,
          base_price: this.base_price,
          bookingDate: this.bookingDate,
          timeSlot: this.selectedTimeSlot,
          quantity: 1, // Default quantity when adding to cart
          }
        const response =  axios.post(`http://127.0.0.1:5000/place_order`, data, {
                    headers: {'Authorization': authValue}});
        console.log(response);
        alert(response.data.message);
        
        // Clear the cart and update local storage
        this.cartItems = [];
        this.updateLocalStorage();
        
      } catch (error) {
        console.error('Error placing order:', error);
        if (error.response && error.response.status === 401) {
          alert('Please login to place an order.');
        } else {
          alert('An error occurred. Please try again later.');
        }
      }
    }
  }
},
async mounted() {
    this.cartItems = JSON.parse(localStorage.getItem('cart')) || [];
    this.calculateTotalCost();
    console.log('Cart items:', this.cartItems);
    let token = localStorage.getItem("Auth-Token");
    let tokenValue = JSON.parse(token || null);
    let authValue = "Bearer "+tokenValue
    const id = this.$route.params.id
    const response = await axios.get(`http://
  }
</script>

<style scoped>
.cart-item {
  border-bottom: 1px solid #ddd;
  padding: 10px 0;
}
.time-slots button {
  margin: 5px;
  padding: 5px 10px;
}
</style>



<template>
  <div>
    <h2>User Profile</h2>
    <form @submit.prevent="updateProfile">
      <div>
        <label for="name">Name:</label>
        <input type="text" id="name" v-model="user.name" required />
      </div>
      <div>
        <label for="email">Email:</label>
        <input type="email" id="email" v-model="user.email"  required />
      </div>
      <div>
        <label for="mobile">Mobile Number:</label>
        <input type="tel" id="mobile" v-model="user.mobile_number" required />
      </div>
      <div>
        <label for="address">Address:</label>
        <input type="text" id="address" v-model="user.address" required />
      </div>
      <div>
        <label for="pincode">Pincode:</label>
        <input type="text" id="pincode" v-model="user.pincode" required />
      </div>
      <button type="submit" class="submit-btn">Update Profile</button>
    </form>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  name: 'UProfile',
  data() {
    return {
      user: {
        name: '',
        email: '',
        mobile_number: '',
        address: '',
        pincode: '',
      },
    };
  },
  async mounted() {
        try {
        const token = localStorage.getItem('token');
        const authValue = 'Bearer ' + token;

        const response = await axios.get('http://127.0.0.1:5000/profile', {
          headers: { Authorization: authValue },
        });
        this.user = response.data;

      } catch (error) {
        console.error('Error fetching user profile:', error);
        alert('An error occurred. Please try again later.');
      }
    },
  methods: {
    async updateProfile() {
      try {
        const token = localStorage.getItem('Auth-Token');
        let tokenValue = JSON.parse(token || null);
        const authValue = 'Bearer ' + token;
        const data = {
          name: this.user.name,
          email: this.user.email,
          mobile_number: this.user.mobile_number,
          address: this.user.address,
          pincode: this.user.pincode,
        };

        const response = await axios.put('http://127.0.0.1:5000/profile', data, {
          headers: { Authorization: authValue },
        });
        alert('Profile updated successfully.');
      } catch (error) {
        console.error('Error updating user profile:', error);
        alert('An error occurred. Please try again later.');
      }
    },
  },
};
</script>



<----------------------------------->



# class BookingAPI(Resource):
#     @jwt_required()
#     @role_required('USER')
#     def post(self):
#         data = request.get_json()
#         user_email = get_jwt_identity()
#         booking = ServiceRequest(
#                    )
#         db.session.add(booking)
#         id = data.get('show_id')
#         service = Service.query.get(id)
#         if service:
#             service.bookings = show.bookings + data.get('tickets')
#             db.session.commit()
#             #cache.delete("showcache")
#             showname = show.Show_Name
#             bodymsg = "You have booked "+ str(data.get('tickets'))+" Tickets of " + showname+"."
#             #send_mail_task.delay(receiver_email = user_email, subject= "Booking Successful" , body=bodymsg)
#             return {"message" : "Booked Successfully."}, 200
#         else:
#             return {"message" : "Invalid Show_id"} , 404

#     @jwt_required()  
#     def get(self):
#         id = get_jwt_identity()
#         alldata = []
#         bookings = Booking.query.filter_by(user_id =id)
#         for booking in bookings:
#             id = booking.id
#             showid = booking.show_id
#             show = Show.query.filter_by(id = showid).first()
#             venueid = show.Venue_id
#             venue = Venue.query.filter_by(id = venueid).first()
#             venuename = venue.Venue_Name
#             showname = show.Show_Name
#             timing = show.Timing
#             ratings = Rating.query.filter_by(booking_id = id).first()
#             if ratings:
#                 stars = ratings.stars
#             else:
#                 stars = 0
#             data = {
#                 "id" : id,
#                 "venuename" : venuename,
#                 "showname" : showname,
#                 "timing" : timing,
#                 "rating" : stars
#             }
#             alldata.append(data)
#         if len(alldata) > 0:
#             return {'bookings': alldata , "message" : "ok"} , 200
#         else:
#             return {"message" : "Bookings Not Found"} , 200




    
# api.add_resource(BookingAPI, '/book')


# class UserProfile(Resource):
#     @jwt_required()
#     def get(self):
#         user_email = get_jwt_identity()
#         user = User.query.get(user_email)
#         return {
#             'name': user.name,
#             'email': user.email,
#             'mobile_number': user.mobile_number,
#             'address': user.address,
#             'pincode': user.pincode,
#         }

#     @jwt_required()
#     def put(self):
#         user_email = get_jwt_identity()
#         user = User.query.get(user_email)

#         data = request.get_json()
#         user.name = data['name']
#         user.email = data['email']
#         user.mobile_number = data['mobile_number']
#         user.address = data['address']
#         user.pincode = data['pincode']

#         db.session.commit()
#         return {'message': 'Profile updated successfully.'}, 200


# # api.add_resource(AddToCart, '/add_to_cart')
# api.add_resource(AvailableSlots, '/available_slots')
# api.add_resource(UserProfile, '/profile')

# # api.add_resource(PlaceOrder, '/place_order')