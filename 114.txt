<template>
  <div>
    <header>
      <h2>Hello, {{ name }}</h2>
      <div>
        <input type="text" v-model="search" placeholder="Search services..." />
        <select v-model="selectedCategory">
          <option value="">All Categories</option>
          <option v-for="cat in categories" :key="cat" :value="cat">{{ cat }}</option>
        </select>
        <button @click="logout">Logout</button>
      </div>
    </header>

    <div v-for="(services, category) in categorizedServices" :key="category">
      <h3>{{ category }}</h3>
      <div v-for="service in services" :key="service.id">
        <h4>{{ service.name }}</h4>
        <p>{{ service.description }}</p>
        <button @click="addToCart(service.id)">Add to Cart</button>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      name: "User",
      services: [],
      search: "",
      selectedCategory: "",
      categories: [],
      filteredServices: [],
    };
  },
  computed: {
    categorizedServices() {
      const grouped = {};
      this.filteredServices.forEach((service) => {
        if (!grouped[service.category]) {
          grouped[service.category] = [];
        }
        grouped[service.category].push(service);
      });
      return grouped;
    },
  },
  methods: {
    async fetchServices() {
      try {
        const token = localStorage.getItem("token");
        const response = await axios.get("http://127.0.0.1:5000/api/services", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });
        this.services = response.data;
        this.filterServices();
        this.categories = [...new Set(this.services.map((s) => s.category))];
      } catch (error) {
        console.error("Error fetching services:", error);
        alert("Failed to load services. Please try again.");
        if (error.response && error.response.status === 401) {
          this.logout();
        }
      }
    },
    filterServices() {
      this.filteredServices = this.services.filter(
        (service) =>
          service.name.toLowerCase().includes(this.search.toLowerCase()) &&
          (this.selectedCategory
            ? service.category === this.selectedCategory
            : true)
      );
    },
    addToCart(serviceId) {
      this.$router.push(`/ucart/${serviceId}`);
    },
    logout() {
      localStorage.clear();
      alert("Logged out successfully.");
      this.$router.push(`/login`);
    },
    navigateTo(page) {
      this.$router.push({ name: page });
    },
  },
  mounted() {
    const token = localStorage.getItem("token");
    const userRole = localStorage.getItem("userrole");
    if (token) {
      if (userRole === "User") {
        this.fetchServices();
      } else if (userRole === "Admin") {
        this.$router.push("/admin");
      } else {
        this.$router.push("/professional");
      }
    } else {
      this.$router.push("/login");
    }
  },
};
</script>











<------------ucart------------------------>
<template>
  <div>
    <h2>Services in Your Cart</h2>
    <div v-if="cartItems.length">
      <div v-for="item in cartItems" :key="item.id" class="cart-item">
        <p>{{ item.name }} - Quantity: {{ item.quantity }}</p>
        <p>Price per unit: {{ item.base_price }} Rs</p>
        <p>Subtotal: {{ item.quantity * item.base_price }} Rs</p>
      </div>
      <div>
        <h3>Total Cost: {{ totalCost }} Rs</h3>
      </div>
    </div>
    
    <div v-else>
      <p>No items in your cart.</p>
    </div>

    <div v-if="cartItems.length">
      <h3>Booking Details</h3>
      <form @submit.prevent="placeOrder">
        <label>Select Booking Date:</label>
        <input type="date" v-model="bookingDate" />
        
        <label>Select Time Slot:</label>
        <div class="time-slots">
          <button type="button" v-for="slot in timeSlots" :key="slot" @click="selectTimeSlot(slot)">
            {{ slot }}
          </button>
        </div>

        <h4>Selected Slot: {{ selectedTimeSlot }}</h4>
        
        <button type="submit" :disabled="!selectedTimeSlot || !bookingDate">Place an Order</button>
      </form>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      cartItems: [],
      bookingDate: '',
      timeSlots: ["7:00 AM", "9:00 AM", "11:00 AM", "1:00 PM", "3:00 PM", "5:00 PM"],
      selectedTimeSlot: '',
      totalCost: 0
    };
  },
  methods: {
    selectTimeSlot(slot) {
      this.selectedTimeSlot = slot;
    },
    calculateTotalCost() {
      this.totalCost = this.cartItems.reduce((total, item) => total + item.quantity * item.base_price, 0);
    },
    updateLocalStorage() {
      localStorage.setItem('cart', JSON.stringify(this.cartItems));
    },
    async placeOrder() {
      try {
        // Get the JWT token from local storage
        const token = localStorage.getItem("Auth-Token");
        const tokenValue = JSON.parse(token || null);
        const authValue = "Bearer " + tokenValue;

        // Gather necessary data from the cart and the form
        const orderData = this.cartItems.map((item) => ({
          service_id: item.id,
          booking_date: this.bookingDate,
          time_slot: this.selectedTimeSlot,
          quantity: item.quantity,
          total_price: item.quantity * item.base_price
        }));

        const data = {
          services: orderData,
          user_id: this.user_id // Assuming the token contains the user_id
        };

        // Make the API request to place the order
        const response = await axios.post('http://127.0.0.1:5000/place_order', data, {
          headers: { 'Authorization': authValue }
        });

        // Display the success message
        alert(response.data.message);

        // Clear the cart and update the local storage
        this.cartItems = [];
        this.updateLocalStorage();
        this.calculateTotalCost();
        console.log("all good")
      } catch (error) {
        console.error('Error placing order:', error);
      }
    }
  },
  async mounted() {
    // Retrieve the cart items from local storage
    this.cartItems = JSON.parse(localStorage.getItem('cart')) || [];
    this.calculateTotalCost();

    // Check if the cart is empty and display an alert
    if (!this.cartItems.length) {
      alert('Your cart is empty. Please add items before proceeding.');
      return;
    }

    // Retrieve the JWT token from local storage
    const token = localStorage.getItem("Auth-Token");
    const authValue = "Bearer " + token;

    // Check if the user is authenticated
    if (token) {
      try {
        // Fetch the user details from the backend
        const response = await axios.get(`http://127.0.0.1:5000/uhome`, {
          headers: { 'Authorization': authValue }
        });
        this.user_id = response.data.user_id;
        console.log('Authenticated User:', response.data);
      } catch (error) {
        console.error('Error fetching user details:', error);
        alert('An error occurred. Please try again later.');
      }
    } else {
      alert('Please login first.');
    }
  }
};
</script>


  
     
  

<style scoped>
.cart-item {
  border-bottom: 1px solid #ddd;
  padding: 10px 0;
}
.time-slots button {
  margin: 5px;
  padding: 5px 10px;
}
</style>











<template>
  <div class="cart-container">
    <h2>Add Service to Cart</h2>
    
    <div v-if="service" class="service-details">
      <h3>{{ service.name }}</h3>
      
      <div class="quantity-section">
        <label>Quantity:</label>
        <input 
          type="number" 
          v-model.number="quantity" 
          min="1" 
          @change="calculateTotalPrice"
        />
      </div>
      
      <div class="booking-date-section">
        <label>Booking Date:</label>
        <div class="date-options">
          <button 
            v-for="(date, index) in bookingDates" 
            :key="index"
            @click="selectBookingDate(date)"
            :class="{ selected: selectedBookingDate === date }"
          >
            {{ date }}
          </button>
        </div>
      </div>
        <div class="time-slot-section">
        <label>Time Slot:</label>
        <div class="time-slots">
          <button 
            v-for="slot in timeSlots" 
            :key="slot"
            @click="selectTimeSlot(slot)"
            :class="{ 'selected': selectedTimeSlot === slot }"
          >
            {{ slot }}
          </button>
        </div>
      </div>
      <div class="price-section">
        <p>Base Price: {{ service.base_price }}</p>
        <p>Total Price: {{ totalPrice }}</p>
      </div>
      
      <button 
        @click="addToCart" 
        :disabled="!isFormValid"
      >
        Confirm Service Request
      </button>
    </div>
    
    <div v-else>
      <p>Loading service details...</p>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      service: null,
      quantity: 1,
      totalPrice: 0,
      selectedDate: null,
      selectedTimeSlot: null,
      bookingDates: [],
      timeSlots: [
        '9:00 AM', '10:00 AM', '11:00 AM', 
        '12:00 PM', '1:00 PM', '2:00 PM', 
        '3:00 PM', '4:00 PM', '5:00 PM'
      ]
    };
  },
  computed: {
     isFormValid() {
      return this.service && 
             this.quantity > 0 && 
             this.selectedDate && 
             this.selectedTimeSlot;
    }
  },
  methods: {
    calculateTotalPrice() {
      if (this.service) {
        this.totalPrice = this.service.base_price * this.quantity;
      }
    },
      generateBookingDates() {
      const today = new Date();
      this.bookingDates = [
        this.formatDate(today),
        this.formatDate(new Date(today.getTime()+24*60*60*1000)),
        this.formatDate(new Date(today.getTime()+2*24*60*60*1000)),
      ];
    },
    formatDate(date) {
      return date.toISOString().split('T')[0];
    },
  
    selectBookingDate(date) {
      this.selectedDate = date;
    },
    selectTimeSlot(slot) {
      this.selectedTimeSlot = slot;
    },
     async addToCart() {
      try {
        const customerId = localStorage.getItem('userId');
        
        const serviceRequestData = {
          service_id: this.service.id,
          email: localStorage.getItem('email'),
          booking_date: this.selectedDate,
          time_slot: this.selectedTimeSlot,
          quantity: this.quantity,
          total_price: this.totalPrice,
          service_pincode: '' 
        };
        console.log("helll");
          const response = await axios.post('http://127.0.0.1:5000/service-requests', serviceRequestData);
          alert('Service request added successfully!');
          this.$router.push('/');
        // this.$router.push('/orders');
      } catch (error) {
        console.error('Error adding service request:', error);
        alert('Failed to add service request. Please try again later.');
      }
    }
  },
  mounted() {
    async fetchServiceDetails() {
      try {
        const serviceId = this.$route.params.serviceId;
        const email = localStorage.getItem('email');
        const response = await axios.get(`http://127.0.0.1:5000/services/${serviceId}`);
        this.service = response.data;
        this.calculateTotalPrice();
      } catch (error) {
        console.error('Error fetching service details:', error);
        this.$router.push('/services');
      }
    },
    this.generateBookingDates();
  }
}
</script>





AProfs
<template>
  <div class="main-container">
    <!-- Navigation Bar -->
    <div class="navigation-bar">
      <div class="nav-header">
        <h2><i>Professional Management</i></h2>
        <div class="nav-buttons">
          <button 
            @click="navigateTo('AHome')"
            :class="{ active: currentRoute === 'AHome' }"
          >Home</button>
          <button 
            @click="navigateTo('AProfs')"
            :class="{ active: currentRoute === 'AProfs' }"
          >Professionals</button>
          <button 
            @click="navigateTo('AUsers')"
            :class="{ active: currentRoute === 'AUsers' }"
          >Users</button>
          <button 
            @click="navigateTo('ARequests')"
            :class="{ active: currentRoute === 'ARequests' }"
          >Service Requests</button>
          <button 
            @click="navigateTo('ASummary')"
            :class="{ active: currentRoute === 'ASummary' }"
          >Summary</button>
          <button @click="logout" class="logout-btn">Logout</button>
        </div>
      </div>
    </div>

    <div class="content-area">
      <div class="filters">
        <input 
          v-model="searchQuery" 
          placeholder="Search by name, email, or category..."
          class="search-input"
          @input="filterProfessionals"
        />
        <select 
          v-model="statusFilter"
          class="status-select"
          @change="filterProfessionals"
        >
          <option value="">All Status</option>
          <option value="Pending">Pending</option>
          <option value="Accepted">Active</option>
          <option value="Blocked">Blocked</option>
        </select>
      </div>

      <div class="table-container">
        <table class="professionals-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Mobile</th>
              <th>Category</th>
              <th>Experience</th>
              <th>Rating</th>
              <th>Status</th>
              <th>Document</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="professional in filteredProfessionals" :key="professional.id">
              <td>{{ professional.name }}</td>
              <td>{{ professional.email }}</td>
              <td>{{ professional.mobile_number }}</td>
              <td>{{ professional.service_category }}</td>
              <td>{{ professional.experience }} years</td>
              <td>{{ professional.ratings }} ⭐</td>
              <td>
                <span :class="'status-' + professional.status.toLowerCase()">
                  {{ professional.status }}
                </span>
              </td>
              <td>
                <button 
                  @click="viewDocument(professional.id)" 
                  class="view-doc-btn"
                >
                  View Document
                </button>
              </td>
              <td>
                <button 
                  v-if="professional.status === 'Pending'"
                  @click="updateStatus(professional.id, 'Accepted')"
                  class="accept-btn"
                >
                  Accept
                </button>
                <button 
                  v-if="professional.status === 'Accepted'"
                  @click="updateStatus(professional.id, 'Blocked')"
                  class="block-btn"
                >
                  Block
                </button>
                <button 
                  v-if="professional.status === 'Blocked'"
                  @click="updateStatus(professional.id, 'Accepted')"
                  class="unblock-btn"
                >
                  Unblock
                </button>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>

    <!-- Document Viewer Modal -->
    <div v-if="showDocModal" class="modal-overlay" @click="closeDocModal">
      <div class="modal-content" @click.stop>
        <div class="modal-header">
          <h3>Document View</h3>
          <button class="close-modal" @click="closeDocModal">×</button>
        </div>
        <div class="modal-body">
          <img v-if="documentUrl" :src="documentUrl" alt="Professional Document" class="document-image"/>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  name: 'AProfs',
  data() {
    return {
      professionals: [],
      statusFilter: '',
      searchQuery: '',
      currentRoute: 'AProfs',
      showDocModal: false,
      documentUrl: null
    }
  },
  computed: {
    filteredProfessionals() {
      return this.professionals.filter(professional => {
        const matchesStatus = !this.statusFilter || professional.status === this.statusFilter;
        const searchLower = this.searchQuery.toLowerCase();
        const matchesSearch = !this.searchQuery || 
          professional.name.toLowerCase().includes(searchLower) ||
          professional.email.toLowerCase().includes(searchLower) ||
          professional.service_category.toLowerCase().includes(searchLower);
        
        return matchesStatus && matchesSearch;
      });
    }
  },
  methods: {
    navigateTo(page) {
      this.$router.push({ name: page });
    },
    logout() {
      localStorage.clear();
      this.$router.push("/login");
    },
    async viewDocument(professionalId) {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(
          `http://127.0.0.1:5000/admin/professionals/${professionalId}/document`, 
          {
            headers: { Authorization: `Bearer ${token}` },
            responseType: 'blob'
          }
        );
        
        this.documentUrl = URL.createObjectURL(response.data);
        this.showDocModal = true;
      } catch (error) {
        console.error('Error fetching document:', error);
        alert('Error loading document');
      }
    },
    closeDocModal() {
      this.showDocModal = false;
      if (this.documentUrl) {
        URL.revokeObjectURL(this.documentUrl);
        this.documentUrl = null;
      }
    },
    async fetchProfessionals() {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get('http://127.0.0.1:5000/admin/professionals', {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        this.professionals = response.data;
      } catch (error) {
        console.error('Error fetching professionals:', error);
      }
    },
    async updateStatus(profId, newStatus) {
      try {
        const token = localStorage.getItem('token');
        await axios.put(`http://127.0.0.1:5000/admin/professionals/${profId}/status`, 
          { status: newStatus },
          { headers: { 'Authorization': `Bearer ${token}` }}
        );
        await this.fetchProfessionals();
      } catch (error) {
        console.error('Error updating professional status:', error);
      }
    }
  },
  mounted() {
    this.fetchProfessionals();
  }
};
</script>

<style scoped>
.main-container {
  display: flex;
  flex-direction: column;
  height: 100vh;
}

.navigation-bar {
  background-color: #4a5568;
  padding: 10px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-buttons {
  display: flex;
  gap: 10px;
}

.nav-buttons button {
  padding: 6px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  color: white;
}

.nav-buttons button.active {
  background-color: #2d3748;
}

.nav-buttons button.logout-btn {
  background-color: #d9534f;
}

.content-area {
  flex: 1;
  padding: 20px;
}

.filters {
  margin-bottom: 20px;
  display: flex;
  gap: 10px;
}

.filters input, .filters select {
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.table-container {
  overflow-x: auto;
}

.professionals-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

.professionals-table th,
.professionals-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

.status-pending {
  color: #f6e05e;
}

.status-approved {
  color: #5cb85c;
}

.status-blocked {
  color: #d9534f;
}

button {
  padding: 6px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  color: white;
}

.approve-btn {
  background-color: #5cb85c;
}

.block-btn {
  background-color: #d9534f;
}

.unblock-btn {
  background-color: #5bc0de;
}

button:hover {
  opacity: 0.9;
}

.view-doc-btn {
  padding: 6px 12px;
  background-color: #4a5568;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.view-doc-btn:hover {
  background-color: #2d3748;
  transform: translateY(-1px);
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.75);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background: white;
  padding: 20px;
  border-radius: 12px;
  max-width: 90%;
  max-height: 90%;
  overflow: auto;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
}

.close-modal {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #4a5568;
}

.document-image {
  max-width: 100%;
  height: auto;
}

.accept-btn {
  background-color: #48bb78;
}
</style>





<template>
  <div class="main-container">
    <!-- Navigation Bar -->
    <div class="navigation-bar">
      <div class="nav-header">
        <h2><i>Analytics Dashboard</i></h2>
        <div class="nav-buttons">
          <button 
            @click="navigateTo('AHome')"
            :class="{ active: currentRoute === 'AHome' }"
          >Home</button>
          <button 
            @click="navigateTo('AProfs')"
            :class="{ active: currentRoute === 'AProfs' }"
          >Professionals</button>
          <button 
            @click="navigateTo('AUsers')"
            :class="{ active: currentRoute === 'AUsers' }"
          >Users</button>
          <button 
            @click="navigateTo('ASummary')"
            :class="{ active: currentRoute === 'ASummary' }"
          >Summary</button>
          <button @click="logout" class="logout-btn">Logout</button>
        </div>
      </div>
    </div>

    <div class="content-area">
      <div class="charts-grid">
        <!-- Category Distribution -->
        <div class="chart-container">
          <h3>Service Category Distribution</h3>
          <canvas ref="categoryChart"></canvas>
        </div>

        <!-- Professional Status -->
        <div class="chart-container">
          <h3>Professional Status Overview</h3>
          <canvas ref="statusChart"></canvas>
        </div>

        <!-- Top Professionals -->
        <div class="chart-container">
          <h3>Top Rated Professionals</h3>
          <canvas ref="topProfsChart"></canvas>
        </div>

        <!-- Rating Distribution -->
        <div class="chart-container">
          <h3>Customer Rating Distribution</h3>
          <canvas ref="ratingChart"></canvas>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import axios from "axios";
import Chart from 'chart.js/auto';

export default {
  name: "ASummary",
  data() {
    return {
      currentRoute: 'ASummary',
      charts: {
        categoryChart: null,
        statusChart: null,
        topProfsChart: null,
        ratingChart: null
      }
    }
  },
  methods: {
    navigateTo(page) {
      if (this.currentRoute !== page) {
        this.$router.push({ name: page });
      }
    },
    logout() {
      localStorage.clear();
      this.$router.push("/login");
    },
    async fetchSummaryData() {
      try {
        console.log("Fetching summary data...");
        const token = localStorage.getItem('token');
        const response = await axios.get('http://127.0.0.1:5000/admin/summary', {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        console.log("Data received:", response.data);
        this.createCharts(response.data);
      } catch (error) {
        console.error('Error:', error);
        if (error.response?.status === 401) {
          this.$router.push('/login');
        }
      }
    },
    createCharts(data) {
      // Category Distribution Pie Chart
      this.charts.categoryChart = new Chart(this.$refs.categoryChart, {
        type: 'pie',
        data: {
          labels: Object.keys(data.category_distribution),
          datasets: [{
            data: Object.values(data.category_distribution),
            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF']
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: { color: '#e2e8f0' }
            }
          }
        }
      });

      // Professional Status Bar Chart
      this.charts.statusChart = new Chart(this.$refs.statusChart, {
        type: 'bar',
        data: {
          labels: ['Approved', 'Blocked', 'Rejected', 'Pending'],
          datasets: [{
            data: ['Approved', 'Blocked', 'Rejected', 'Pending'].map(
              status => data.professional_status[status] || 0
            ),
            backgroundColor: ['#4CAF50', '#F44336', '#FF9800', '#2196F3']
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: { color: '#e2e8f0' }
            },
            x: {
              ticks: { color: '#e2e8f0' }
            }
          },
          plugins: {
            legend: { display: false }
          }
        }
      });

      // Top Professionals Bar Chart
      this.charts.topProfsChart = new Chart(this.$refs.topProfsChart, {
        type: 'bar',
        data: {
          labels: data.top_professionals.map(prof => prof.name),
          datasets: [{
            data: data.top_professionals.map(prof => prof.rating),
            backgroundColor: ['#4CAF50', '#2196F3', '#FFC107']
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              max: 5,
              ticks: { color: '#e2e8f0' }
            },
            x: {
              ticks: { color: '#e2e8f0' }
            }
          },
          plugins: {
            legend: { display: false }
          }
        }
      });

      // Rating Distribution Pie Chart
      this.charts.ratingChart = new Chart(this.$refs.ratingChart, {
        type: 'pie',
        data: {
          labels: ['5 Stars', '4 Stars', '3 Stars', '2 Stars', '1 Star'],
          datasets: [{
            data: [5,4,3,2,1].map(rating => data.rating_distribution[rating] || 0),
            backgroundColor: ['#4CAF50', '#8BC34A', '#FFCE56', '#FF9800', '#F44336']
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              position: 'bottom',
              labels: { color: '#e2e8f0' }
            }
          }
        }
      });
    }
  },
  mounted() {
    console.log("ASummary component mounted");
    this.fetchSummaryData();
  },
  beforeUnmount() {
    Object.values(this.charts).forEach(chart => {
      if (chart) chart.destroy();
    });
  }
};
</script>

<style scoped>
.main-container {
  background-color: #2d3748;
  min-height: 100vh;
  color: white;
}

.navigation-bar {
  background: white;
  padding: 1rem 2rem;
  margin-bottom: 20px;
}

.nav-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-buttons {
  display: flex;
  gap: 15px;
}

.nav-buttons button {
  padding: 8px 16px;
  border: none;
  border-radius: 8px;
  background: #f8f9fa;
  color: #495057;
  cursor: pointer;
  transition: all 0.3s ease;
}

.nav-buttons button.active {
  background: #0d6efd;
  color: white;
}

.logout-btn {
  background: #dc3545 !important;
  color: white !important;
}

.content-area {
  padding: 20px;
  max-width: 1400px;
  margin: 0 auto;
}

.charts-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 30px;
  padding: 20px;
}

.chart-container {
  background: #ffffff0d;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  height: 400px;
}

.chart-container h3 {
  margin-bottom: 20px;
  color: #e2e8f0;
  text-align: center;
  font-size: 1.2rem;
}

@media (max-width: 1024px) {
  .charts-grid {
    grid-template-columns: 1fr;
  }
}

@media (max-width: 768px) {
  .nav-buttons {
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .chart-container {
    padding: 15px;
    height: 300px;
  }
}
</style>











aresquests.vue

<template>
  <div class="main-container">
    <!-- Navigation Bar -->
    <div class="navigation-bar">
      <div class="nav-header">
        <h2><i>Service Requests Management</i></h2>
        <div class="nav-buttons">
          <button 
            @click="navigateTo('AHome')"
            :class="{ active: currentRoute === 'AHome' }"
          >Home</button>
          <button 
            @click="navigateTo('AProfs')"
            :class="{ active: currentRoute === 'AProfs' }"
          >Professionals</button>
          <button 
            @click="navigateTo('AUsers')"
            :class="{ active: currentRoute === 'AUsers' }"
          >Users</button>
          <button 
            @click="navigateTo('ARequests')"
            :class="{ active: currentRoute === 'ARequests' }"
          >Service Requests</button>
          <button 
            @click="navigateTo('ASummary')"
            :class="{ active: currentRoute === 'ASummary' }"
          >Summary</button>
          <button @click="logout" class="logout-btn">Logout</button>
        </div>
      </div>
    </div>

    <div class="content-area">
      <div class="filters">
        <input 
          v-model="searchQuery" 
          placeholder="Search by service, customer, or professional..."
          class="search-input"
          @input="filterRequests"
        />
        <select 
          v-model="statusFilter"
          class="status-select"
          @change="filterRequests"
        >
          <option value="">All Status</option>
          <option value="pending">Pending</option>
          <option value="confirmed">Confirmed</option>
          <option value="completed">Completed</option>
          <option value="cancelled">Cancelled</option>
        </select>
      </div>

      <div class="table-container">
        <table class="requests-table">
          <thead>
            <tr>
              <th>Service Name</th>
              <th>Customer Name</th>
              <th>Professional Name</th>
              <th>Booking Date</th>
              <th>Time Slot</th>
              <th>Status</th>
              <th>Rating</th>
              <th>Total Price</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="request in filteredRequests" :key="request.id">
              <td>{{ request.service_name }}</td>
              <td>{{ request.customer_name }}</td>
              <td>{{ request.professional_name || 'Not Assigned' }}</td>
              <td>{{ request.booking_date }}</td>
              <td>{{ request.time_slot }}</td>
              <td>
                <span :class="'status-' + request.status.toLowerCase()">
                  {{ request.status }}
                </span>
              </td>
              <td>{{ request.rating ? `${request.rating} ⭐` : 'Not Rated' }}</td>
              <td>₹{{ request.total_price }}</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  name: 'ARequests',
  data() {
    return {
      requests: [],
      statusFilter: '',
      searchQuery: '',
      currentRoute: 'ARequests'
    }
  },
  computed: {
    filteredRequests() {
      return this.requests.filter(request => {
        const matchesStatus = !this.statusFilter || request.status.toLowerCase() === this.statusFilter;
        const searchLower = this.searchQuery.toLowerCase();
        const matchesSearch = !this.searchQuery || 
          request.service_name.toLowerCase().includes(searchLower) ||
          request.customer_name.toLowerCase().includes(searchLower) ||
          (request.professional_name && request.professional_name.toLowerCase().includes(searchLower));
        
        return matchesStatus && matchesSearch;
      });
    }
  },
  methods: {
    navigateTo(page) {
      this.$router.push({ name: page });
    },
    logout() {
      localStorage.clear();
      this.$router.push("/login");
    },
    async fetchRequests() {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get('http://127.0.0.1:5000/admin/requests', {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        this.requests = response.data;
      } catch (error) {
        console.error('Error fetching requests:', error);
        if (error.response?.status === 401) {
          this.$router.push('/login');
        }
      }
    }
  },
  mounted() {
    this.fetchRequests();
  }
};
</script>

<style scoped>
.main-container {
  background-color: #2d3748;
  min-height: 100vh;
  padding: 20px;
  color: white;
}

.navigation-bar {
  background: #2d3748;
  padding: 1rem 2rem;
  border-radius: 12px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  margin-bottom: 20px;
}

.nav-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-buttons {
  display: flex;
  gap: 15px;
}

.nav-buttons button {
  padding: 8px 16px;
  border: none;
  border-radius: 8px;
  background: #444;
  color: white;
  cursor: pointer;
  transition: all 0.3s ease;
}

.nav-buttons button.active {
  background: #0d6efd;
  color: white;
}

.logout-btn {
  background: #dc3545 !important;
  color: white !important;
}

.content-area {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.filters {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
}

.search-input, .status-select {
  padding: 10px;
  border: 1px solid #4a5568;
  border-radius: 8px;
  background: #2d3748;
  color: white;
  flex: 1;
}

.search-input::placeholder {
  color: #a0aec0;
}

.table-container {
  background: #ffffff0d;
  border-radius: 12px;
  padding: 20px;
  overflow-x: auto;
}

.requests-table {
  width: 100%;
  border-collapse: collapse;
  color: #e2e8f0;
}

.requests-table th,
.requests-table td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid #4a5568;
}

.requests-table th {
  background-color: #4a5568;
  color: white;
}

.status-pending {
  color: #f6e05e;
}

.status-confirmed {
  color: #48bb78;
}

.status-completed {
  color: #4299e1;
}

.status-cancelled {
  color: #f56565;
}

@media (max-width: 768px) {
  .filters {
    flex-direction: column;
  }
  
  .nav-buttons {
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .table-container {
    padding: 10px;
  }
  
  .requests-table {
    font-size: 14px;
  }
}
</style>



ahome.vue

<template>
  <div class="main-container">
    <!-- Navigation Bar -->
    <div class="navigation-bar">
      <div class="nav-header">
        <h2><i>Admin Dashboard</i></h2>
        <div class="nav-buttons">
          <button 
            @click="navigateTo('AHome')"
            :class="{ active: currentRoute === 'AHome' }"
          >Home</button>
          <button 
            @click="navigateTo('AProfs')"
            :class="{ active: currentRoute === 'AProfs' }"
          >Professionals</button>
          <button 
            @click="navigateTo('AUsers')"
            :class="{ active: currentRoute === 'AUsers' }"
          >Users</button>
          <button 
            @click="navigateTo('ARequests')"
            :class="{ active: currentRoute === 'ARequests' }"
          >Service Requests</button>
          <button 
            @click="navigateTo('ASummary')"
            :class="{ active: currentRoute === 'ASummary' }"
          >Summary</button>
          <button @click="logout" class="logout-btn">Logout</button>
        </div>
      </div>
    </div>

    <!-- Search Section -->
    <div class="search-section">
      <div class="search-filters">
        <input 
          v-model="searchQuery" 
          placeholder="Search services..." 
          @input="filterServices"
          class="search-input" 
        />
        <select 
          v-model="selectedCategory" 
          @change="filterServices"
          class="category-select"
        >
          <option value="">All Categories</option>
          <option v-for="category in categories" :key="category" :value="category">
            {{ category }}
          </option>
        </select>
      </div>
      
      <div class="add-service-section">
        <button 
          @click="navigateTo('AddServices')" 
          class="add-service-btn"
        >
          + Add New Service
        </button>
      </div>
    </div>

    <!-- Content Area -->
    <div class="content-area">
      <div class="services-container">
        <div v-for="category in groupedServices" :key="category.name" class="category-section">
          <h3 class="category-title">{{ category.name }}</h3>
          <div class="services-grid">
            <div v-for="service in category.services" :key="service.id" class="service-card">
              <div class="service-header">
                <h4>{{ service.name }}</h4>
                <span class="rating">{{ service.avg_rating }} ⭐</span>
              </div>
              <p class="description">{{ service.description }}</p>
              <div class="service-details">
                <p><i class="time-icon">⏰</i> {{ service.time_required }} mins</p>
                <p><i class="price-icon">💰</i> ₹{{ service.base_price }}</p>
              </div>
              <div class="action-buttons">
                <button 
                  @click="editService(service.id)" 
                  class="edit-btn"
                >
                  Edit
                </button>
                <button 
                  @click="deleteService(service.id)" 
                  class="delete-btn"
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import axios from "axios";

export default {
  data() {
    return {
      searchQuery: "",
      selectedCategory: "",
      categories: ['Cleaning', 'Plumbing', 'Electrical', 'Painting'],
      services: [],
      filteredServices: [],
      currentRoute: 'AHome'
    };
  },
  computed: {
    groupedServices() {
      const grouped = {};
      this.filteredServices.forEach(service => {
        if (!grouped[service.category]) {
          grouped[service.category] = {
            name: service.category,
            services: []
          };
        }
        grouped[service.category].services.push(service);
      });
      return Object.values(grouped);
    }
  },
  methods: {
    navigateTo(page) {
      this.$router.push({ name: page });
    },
    logout() {
      localStorage.clear();
      this.$router.push("/login");
    },
    async fetchServices() {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get("http://127.0.0.1:5000/adminservice", {
          headers: { Authorization: `Bearer ${token}` }
        });
        this.services = response.data;
        this.filterServices();
      } catch (error) {
        console.error("Error fetching services:", error);
        if (error.response?.status === 401) {
          this.$router.push('/login');
        }
      }
    },
    filterServices() {
      this.filteredServices = this.services.filter((service) =>
        service.name.toLowerCase().includes(this.searchQuery.toLowerCase()) &&
        (this.selectedCategory ? service.category === this.selectedCategory : true)
      );
    },
    editService(serviceId) {
      this.$router.push({ name: 'EditServices', params: { id: serviceId } });
    },
    async deleteService(serviceId) {
      if (confirm('Are you sure you want to delete this service?')) {
        try {
          const token = localStorage.getItem('token');
          await axios.delete(`http://127.0.0.1:5000/adminservice/${serviceId}`, {
            headers: { Authorization: `Bearer ${token}` }
          });
          await this.fetchServices();
          alert('Service deleted successfully');
        } catch (error) {
          console.error('Error deleting service:', error);
          alert('Failed to delete service');
        }
      }
    }
  },
  mounted() {
    this.fetchServices();
  }
};
</script>

<style scoped>
.main-container {
  background-color: #2d3748;
  color: white;
  min-height: 100vh;
  padding: 0;
}

.navigation-bar {
  background: #2d3748;
  padding: 1rem 2rem;
  border-radius: 0;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  margin-bottom: 0;
  margin-left: 5px;
  margin-right:2px;
  position: sticky;
  top: 0;
  z-index: 1000;
}

.nav-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-buttons {
  display: flex;
  gap: 15px;
  flex-wrap: wrap;
}

.nav-buttons button {
  padding: 8px 16px;
  border: none;
  border-radius: 8px;
  background: #444;
  color: #f8f9fa;
  cursor: pointer;
  transition: all 0.3s ease;
  white-space: nowrap;
}

.nav-buttons button:hover {
  transform: translateY(-2px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.nav-buttons button.active {
  background: #0d6efd;
  color: white;
}

.logout-btn {
  background: #dc3545 !important;
  color: white !important;
}

.search-section {
  max-width: 1200px;
  margin: 20px auto;
  padding: 0 20px;
}

.search-filters {
  display: flex;
  gap: 20px;
  margin-top: 110px;
  margin-bottom: 15px;
  width: 100%;
}

.search-input, .category-select {
  padding: 12px 20px;
  border: 1px solid #dee2e6;
  border-radius: 8px;
  font-size: 1rem;
  transition: all 0.3s ease;
  background: white;
  color: #333;
}

.search-input {
  flex: 2;
  min-width: 0;
}

.category-select {
  flex: 1;
  min-width: 200px;
}

.search-input:focus, .category-select:focus {
  outline: none;
  border-color: #0d6efd;
  box-shadow: 0 0 0 3px rgba(13,110,253,0.25);
}

.add-service-section {
  width: 100%;
  text-align: right;
  padding: 10px 0;
  border-bottom: 1px solid #444;
  margin-bottom: 20px;
}

.add-service-btn {
  padding: 12px 24px;
  background-color: #28a745;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  display: inline-flex;
  align-items: center;
  gap: 8px;
}

.add-service-btn:hover {
  background-color: #218838;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.content-area {
  padding: 20px;
}

.services-container {
  max-width: 1200px;
  margin: 0 auto;
}

.category-title {
  margin: 20px 0;
  color: #f8f9fa;
  font-size: 1.5rem;
}

.services-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
  gap: 25px;
  margin-bottom: 30px;
}

.service-card {
  background: #444;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  transition: all 0.3s ease;
}

.service-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
}

.service-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.service-header h4 {
  margin: 0;
  color: #f8f9fa;
  font-size: 1.2rem;
}

.rating {
  color: #ffd700;
}

.description {
  color: #dee2e6;
  margin: 10px 0;
  line-height: 1.4;
}

.service-details {
  display: flex;
  gap: 20px;
  margin: 15px 0;
  color: #adb5bd;
}

.service-details p {
  display: flex;
  align-items: center;
  gap: 5px;
  margin: 0;
}

.action-buttons {
  display: flex;
  gap: 10px;
  margin-top: 15px;
}

.action-buttons button {
  flex: 1;
  padding: 8px 16px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: 500;
}

.edit-btn {
  background-color: #ffc107;
  color: #000;
}

.delete-btn {
  background-color: #dc3545;
  color: white;
}

.edit-btn:hover, .delete-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}

@media (max-width: 768px) {
  .search-filters {
    flex-direction: column;
    gap: 10px;
  }

  .search-input, .category-select {
    width: 100%;
  }

  .category-select {
    min-width: 100%;
  }

  .services-grid {
    grid-template-columns: 1fr;
  }

  .nav-buttons {
    justify-content: center;
  }
}
</style>




profile professional
<template>
  <div class="main-container">
    <!-- Navigation Bar -->
    <div class="navigation-bar">
      <div class="nav-header">
        <h2><i>Professional Dashboard</i></h2>
        <div class="nav-buttons">
          <button 
            @click="navigateTo('PHome')"
            :class="{ active: currentRoute === 'PHome' }"
          >Home</button>
          <button 
            @click="navigateTo('PRequests')"
            :class="{ active: currentRoute === 'PRequests' }"
          >History</button>
          <button 
            @click="navigateTo('PProfile')"
            :class="{ active: currentRoute === 'PProfile' }"
          >Profile</button>
          <button 
            @click="navigateTo('PSummary')"
            :class="{ active: currentRoute === 'PSummary' }"
          >Summary</button>
          <button @click="logout" class="logout-btn">Logout</button>
        </div>
      </div>
    </div>

    <div class="content-area">
      <div class="profile-container">
        <div class="profile-form">
          <div class="form-group">
            <label>Name</label>
            <input v-model="profile.name" type="text" :disabled="!isEditing" />
          </div>
          
          <div class="form-group">
            <label>Email</label>
            <input v-model="profile.email" type="email" disabled />
          </div>
          
          <div class="form-group">
            <label>Mobile Number</label>
            <input v-model="profile.mobile_number" type="text" :disabled="!isEditing" />
          </div>
          
          <div class="form-group">
            <label>Service Category</label>
            <input v-model="profile.service_category" type="text" disabled />
          </div>
          
          <div class="form-group">
            <label>Available Pincodes (comma-separated)</label>
            <input v-model="profile.available_pincodes" type="text" :disabled="!isEditing" />
          </div>
          
          <div class="button-group">
            <button v-if="!isEditing" @click="startEditing" class="edit-btn">
              Edit Profile
            </button>
            <template v-else>
              <button @click="saveProfile" class="save-btn">Save</button>
              <button @click="cancelEditing" class="cancel-btn">Cancel</button>
            </template>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  name: 'PProfile',
  data() {
    return {
      currentRoute: 'PProfile',
      isEditing: false,
      profile: {
        name: '',
        email: '',
        mobile_number: '',
        service_category: '',
        available_pincodes: ''
      },
      originalProfile: null
    }
  },
  methods: {
    navigateTo(page) {
      this.$router.push({ name: page });
    },
    logout() {
      localStorage.clear();
      this.$router.push("/login");
    },
    async fetchProfile() {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get('http://127.0.0.1:5000/professional/profile', {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        // Only update the fields we want to display
        this.profile = {
          name: response.data.name,
          email: response.data.email,
          mobile_number: response.data.mobile_number,
          service_category: response.data.service_category,
          available_pincodes: response.data.available_pincodes
        };
        this.originalProfile = { ...this.profile };
      } catch (error) {
        console.error('Error fetching profile:', error);
        if (error.response?.status === 401) {
          this.$router.push('/login');
        }
      }
    },
    startEditing() {
      this.isEditing = true;
      this.originalProfile = { ...this.profile };
    },
    cancelEditing() {
      this.profile = { ...this.originalProfile };
      this.isEditing = false;
    },
    async saveProfile() {
      try {
        const token = localStorage.getItem('token');
        await axios.put('http://127.0.0.1:5000/professional/profile', {
          name: this.profile.name,
          mobile_number: this.profile.mobile_number,
          available_pincodes: this.profile.available_pincodes
        }, {
          headers: { Authorization: `Bearer ${token}` }
        });
        this.isEditing = false;
        this.originalProfile = { ...this.profile };
      } catch (error) {
        console.error('Error updating profile:', error);
        alert('Failed to update profile');
      }
    }
  },
  mounted() {
    const token = localStorage.getItem('token');
    if (!token) {
      this.$router.push('/login');
      return;
    }
    this.fetchProfile();
  }
}
</script>

<style scoped>
.main-container {
  background-color: #2d3748;
  padding: 30px;
  min-height: 100vh;
  color: white;
}

.navigation-bar {
  background: #2d3748;
  padding: 1rem 2rem;
  border-radius: 12px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  margin-bottom: 20px;
}

.nav-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-buttons {
  display: flex;
  gap: 15px;
}

.nav-buttons button {
  padding: 8px 16px;
  border: none;
  border-radius: 8px;
  background: #444;
  color: white;
  cursor: pointer;
  transition: all 0.3s ease;
}

.nav-buttons button:hover {
  transform: translateY(-2px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.nav-buttons button.active {
  background: #0d6efd;
  color: white;
}

.logout-btn {
  background: #dc3545 !important;
  color: white !important;
}

.profile-container {
  max-width: 800px;
  margin: 0 auto;
  background: #444;
  border-radius: 12px;
  padding: 30px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  margin-bottom: 8px;
  color: #e2e8f0;
  font-weight: 500;
}

.form-group input {
  width: 100%;
  padding: 10px;
  border: 1px solid #4a5568;
  border-radius: 8px;
  background: #2d3748;
  color: white;
}

.form-group input:disabled {
  background: #374151;
  cursor: not-allowed;
}

.rating-display {
  display: flex;
  align-items: center;
  gap: 10px;
  font-size: 1.1em;
}

.button-group {
  display: flex;
  gap: 10px;
  margin-top: 30px;
}

.button-group button {
  padding: 10px 20px;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  color: white;
}

.edit-btn {
  background: #0d6efd;
}

.save-btn {
  background: #48bb78;
}

.cancel-btn {
  background: #dc3545;
}
</style>




upd aprofs.vue

<template>
  <div class="main-container">
    <!-- Navigation Bar -->
    <div class="navigation-bar">
      <div class="nav-header">
        <h2><i>Professional Management</i></h2>
        <div class="nav-buttons">
          <button 
            @click="navigateTo('AHome')"
            :class="{ active: currentRoute === 'AHome' }"
          >Home</button>
          <button 
            @click="navigateTo('AProfs')"
            :class="{ active: currentRoute === 'AProfs' }"
          >Professionals</button>
          <button 
            @click="navigateTo('AUsers')"
            :class="{ active: currentRoute === 'AUsers' }"
          >Users</button>
          <button 
            @click="navigateTo('ARequests')"
            :class="{ active: currentRoute === 'ARequests' }"
          >Service Requests</button>
          <button 
            @click="navigateTo('ASummary')"
            :class="{ active: currentRoute === 'ASummary' }"
          >Summary</button>
          <button @click="logout" class="logout-btn">Logout</button>
        </div>
      </div>
    </div>

    <div class="content-area">
      <div class="filters">
        <input 
          v-model="searchQuery" 
          placeholder="Search by name, email, or category..."
          class="search-input"
          @input="filterProfessionals"
        />
        <select 
          v-model="statusFilter"
          class="status-select"
          @change="filterProfessionals"
        >
          <option value="">All Status</option>
          <option value="Pending">Pending</option>
          <option value="Accepted">Active</option>
          <option value="Blocked">Blocked</option>
        </select>
      </div>

      <div class="table-container">
        <table class="professionals-table">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Mobile</th>
              <th>Category</th>
              <th>Experience</th>
              <th>Rating</th>
              <th>Status</th>
              <th>Document</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="professional in filteredProfessionals" :key="professional.id">
              <td>{{ professional.name }}</td>
              <td>{{ professional.email }}</td>
              <td>{{ professional.mobile_number }}</td>
              <td>{{ professional.service_category }}</td>
              <td>{{ professional.experience }} years</td>
              <td>{{ professional.ratings }} ⭐</td>
              <td>
                <span :class="'status-' + professional.status.toLowerCase()">
                  {{ professional.status }}
                </span>
              </td>
              <td>
                <button 
                  @click="viewDocument(professional.id)" 
                  class="view-doc-btn"
                >
                  View Document
                </button>
              </td>
              <td class="actions-cell">
                <div class="action-buttons">
                  <!-- For Pending professionals -->
                  <button 
                    v-if="professional.status === 'pending'"
                    @click="updateStatus(professional.id, 'Accepted')"
                    class="action-btn accept-btn"
                  >
                    Accept
                  </button>
                  <button 
                    v-if="professional.status === 'pending'"
                    @click="updateStatus(professional.id, 'Rejected')"
                    class="action-btn reject-btn"
                  >
                    Reject
                  </button>

                  <!-- For Active professionals -->
                  <button 
                    v-if="professional.status === 'Accepted'"
                    @click="updateStatus(professional.id, 'Blocked')"
                    class="action-btn block-btn"
                  >
                    Block
                  </button>
                  <button 
                    v-if="professional.status === 'Blocked'"
                    @click="updateStatus(professional.id, 'Accepted')"
                    class="action-btn unblock-btn"
                  >
                    Unblock
                  </button>
                </div>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  name: 'AProfs',
  data() {
    return {
      professionals: [],
      statusFilter: '',
      searchQuery: '',
      currentRoute: 'AProfs',
      showDocModal: false,
      documentUrl: null
    }
  },
  computed: {
    filteredProfessionals() {
      return this.professionals.filter(professional => {
        const matchesStatus = !this.statusFilter || professional.status === this.statusFilter;
        const searchLower = this.searchQuery.toLowerCase();
        const matchesSearch = !this.searchQuery || 
          professional.name.toLowerCase().includes(searchLower) ||
          professional.email.toLowerCase().includes(searchLower) ||
          (professional.service_category && professional.service_category.toLowerCase().includes(searchLower));
        
        return matchesStatus && matchesSearch;
      });
    }
  },
  methods: {
    navigateTo(page) {
      this.$router.push({ name: page });
    },
    logout() {
      localStorage.clear();
      this.$router.push("/login");
    },
    async fetchProfessionals() {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get('http://127.0.0.1:5000/admin/professionals', {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        this.professionals = response.data;
      } catch (error) {
        console.error('Error fetching professionals:', error);
        if (error.response?.status === 401) {
          this.$router.push('/login');
        }
      }
    },
    async updateStatus(profId, newStatus) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          this.$router.push('/login');
          return;
        }

        const response = await axios.put(
          `http://127.0.0.1:5000/admin/professionals/${profId}/status`,
          { status: newStatus },
          { 
            headers: { 
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          }
        );

        if (response.status === 200) {
          await this.fetchProfessionals();
          alert('Professional status updated successfully');
        }
      } catch (error) {
        console.error('Error updating professional status:', error);
        if (error.response?.status === 401) {
          alert('Unauthorized access. Please login again.');
          localStorage.clear();
          this.$router.push('/login');
        } else {
          alert('Error updating status. Please try again later.');
        }
      }
    },
    async viewDocument(profId) {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get(
          `http://127.0.0.1:5000/admin/professionals/${profId}/document`, 
          {
            headers: { Authorization: `Bearer ${token}` },
            responseType: 'blob'
          }
        );
        
        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', `document_${profId}.pdf`);
        document.body.appendChild(link);
        link.click();
        link.remove();
        window.URL.revokeObjectURL(url);
      } catch (error) {
        console.error('Error fetching document:', error);
        alert('Error downloading document');
      }
    }
  },
  mounted() {
    this.fetchProfessionals();
  }
};
</script>

<style scoped>
.main-container {
    background-color: #2d3748;
  min-height: 100vh;
  padding: 20px;
  color: white;
}

.navigation-bar {
  background: #2d3748;
  padding: 1rem 2rem;
  border-radius: 12px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  margin-bottom: 20px;
}

.nav-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-buttons {
  display: flex;
  gap: 15px;
}

.nav-buttons button {
  padding: 8px 16px;
  border: none;
  border-radius: 8px;
  background: #444;
  color: white;
  cursor: pointer;
  transition: all 0.3s ease;
}

.nav-buttons button.active {
  background: #0d6efd;
  color: white;
}

.nav-buttons button.logout-btn {
background: #dc3545 !important;
  color: white !important;
}

.content-area {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.filters {
    display: flex;
  gap: 20px;
  margin-bottom: 20px;
}

.filters input, .filters select {
 padding: 10px;
  border: 1px solid #4a5568;
  border-radius: 8px;
  background: #2d3748;
  color: white;
  flex: 1;
}
.search-input::placeholder {
  color: #a0aec0;
}
.table-container {
    background: #ffffff0d;
  border-radius: 12px;
  padding: 20px;
  overflow-x: auto;
  width: 100%;
}

.professionals-table {
  width: 100%;
  border-collapse: collapse;
  color: #e2e8f0;
  min-width: 1000px;
}

.professionals-table th,
.professionals-table td {
  padding: 12px;
  text-align: left;
border-bottom: 1px solid #4a5568;
}

.status-pending {
  color: #f6e05e;
}

.status-approved {
  color: #5cb85c;
}

.status-blocked {
  color: #d9534f;
}

button {
 padding: 6px 12px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  color: white;
  transition: all 0.3s ease;
}

.approve-btn {
  background-color: #5cb85c;
}

.block-btn {
  background-color:  #f56565;
}

.unblock-btn {
  background-color: #48bb78;
}

button:hover, .unblock-btn:hover {
  opacity: 0.9;
  transform: translateY(-1px);
}

.view-doc-btn {
  padding: 6px 12px;
  background-color: #4a5568;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.view-doc-btn:hover {
  background-color: #2d3748;
  transform: translateY(-1px);
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.75);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background: white;
  padding: 20px;
  border-radius: 12px;
  max-width: 90%;
  max-height: 90%;
  overflow: auto;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 15px;
}

.close-modal {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #4a5568;
}

.document-image {
  max-width: 100%;
  height: auto;
}

.action-buttons {
  display: flex;
  gap: 8px;
  justify-content: flex-start;
  flex-wrap: wrap;
}

.action-btn {
  padding: 6px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s ease;
  color: white;
  white-space: nowrap;
  min-width: 80px;
}

.accept-btn {
  background-color: #28a745;
}

.block-btn {
  background-color: #dc3545;
}

.unblock-btn {
  background-color: #17a2b8;
}

.action-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 2px 4px rgba(0,0,0,0.2);
  opacity: 0.9;
}

.reject-btn {
  background-color: #dc3545;
}

.status-Pending {
  color: #ffd700;
}

.status-Accepted {
  color: #48bb78;
}

.status-Blocked {
  color: #f56565;
}

.status-Rejected {
  color: #dc3545;
}

.professionals-table td {
  padding: 12px;
  vertical-align: middle;
}

.actions-cell {
  min-width: 200px; /* Ensure enough space for buttons */
  padding: 8px !important;
}

.action-buttons {
  display: flex;
  gap: 8px;
  justify-content: flex-start;
}

.action-btn {
  padding: 6px 12px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  transition: all 0.3s ease;
  color: white;
  min-width: 80px;
  display: inline-block; /* Add this */
}

.accept-btn {
  background-color: #28a745;
}

.reject-btn {
  background-color: #dc3545;
}

.block-btn {
  background-color: #dc3545;
}

.unblock-btn {
  background-color: #17a2b8;
}

/* Make sure table cells have proper padding */
.professionals-table td {
  padding: 12px;
  vertical-align: middle;
  white-space: nowrap;
}

/* Add hover effect to buttons */
.action-btn:hover {
  opacity: 0.9;
  transform: translateY(-2px);
}

/* Make sure the table container allows horizontal scroll */
.table-container {
  overflow-x: auto;
  margin: 20px 0;
  background: #ffffff0d;
  border-radius: 12px;
  padding: 20px;
}

.professionals-table {
  width: 100%;
  border-collapse: collapse;
  min-width: 1200px; /* Ensure table doesn't get too cramped */
}
</style>